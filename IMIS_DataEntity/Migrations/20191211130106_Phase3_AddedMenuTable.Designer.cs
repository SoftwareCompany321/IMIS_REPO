// <auto-generated />
using System;
using IMIS_DataEntity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IMIS_DataEntity.Migrations
{
    [DbContext(typeof(IMISDbContext))]
    [Migration("20191211130106_Phase3_AddedMenuTable")]
    partial class Phase3_AddedMenuTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccAccMaster", b =>
                {
                    b.Property<decimal>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccCode")
                        .HasColumnName("ACC_CODE")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AccType")
                        .HasColumnName("ACC_TYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DispCode")
                        .HasColumnName("DISP_CODE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DispName")
                        .HasColumnName("DISP_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<int?>("GrpLevel")
                        .HasColumnName("GRP_LEVEL")
                        .HasColumnType("integer");

                    b.Property<string>("IsBudgetable")
                        .HasColumnName("IS_BUDGETABLE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsFixed")
                        .HasColumnName("IS_FIXED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsHide")
                        .HasColumnName("IS_HIDE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsTransactable")
                        .HasColumnName("IS_TRANSACTABLE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Iscapitalcurrent")
                        .HasColumnName("ISCAPITALCURRENT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("ParentAccId")
                        .HasColumnName("PARENT_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TypeId")
                        .HasColumnName("TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("AccId")
                        .HasName("ACC_ACC_MASTER_pkey");

                    b.HasIndex("TypeId");

                    b.ToTable("ACC_ACC_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccAsuliBibaran", b =>
                {
                    b.Property<decimal>("AsuliId")
                        .HasColumnName("ASULI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AmtTaken")
                        .HasColumnName("AMT_TAKEN")
                        .HasColumnType("double precision");

                    b.Property<string>("CollectReason")
                        .HasColumnName("COLLECT_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("PaymentPersonId")
                        .HasColumnName("PAYMENT_PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PersonName")
                        .HasColumnName("PERSON_NAME")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PeskiAmt")
                        .HasColumnName("PESKI_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("PeskiEmployeeId")
                        .HasColumnName("PESKI_EMPLOYEE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PropertyDetails")
                        .HasColumnName("PROPERTY_DETAILS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("PropertyEmployeeId")
                        .HasColumnName("PROPERTY_EMPLOYEE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PropertyRoka")
                        .HasColumnName("PROPERTY_ROKA")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ResponsiveTaken")
                        .HasColumnName("RESPONSIVE_TAKEN")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkName")
                        .HasColumnName("WORK_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("AsuliId")
                        .HasName("ACC_ASULI_BIBARAN_pkey");

                    b.HasIndex("PersonTypeId");

                    b.ToTable("ACC_ASULI_BIBARAN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBankGrnty", b =>
                {
                    b.Property<decimal>("GrntyId")
                        .HasColumnName("GRNTY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BankName")
                        .HasColumnName("BANK_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("EntryDatetime")
                        .HasColumnName("ENTRY_DATETIME")
                        .HasColumnType("date");

                    b.Property<string>("ExpryVsDate")
                        .HasColumnName("EXPRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("GrntyAmount")
                        .HasColumnName("GRNTY_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("GrntyNo")
                        .HasColumnName("GRNTY_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("GrntyType")
                        .HasColumnName("GRNTY_TYPE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("GrntyVsDate")
                        .HasColumnName("GRNTY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("MagCn")
                        .HasColumnName("MAG_CN")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MagPs")
                        .HasColumnName("MAG_PS")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MagVsDate")
                        .HasColumnName("MAG_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PhukuwaCn")
                        .HasColumnName("PHUKUWA_CN")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhukuwaPs")
                        .HasColumnName("PHUKUWA_PS")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("PhukuwaVsDate")
                        .HasColumnName("PHUKUWA_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("GrntyId")
                        .HasName("ACC_BANK_GRNTY_pkey");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_BANK_GRNTY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBankStatement", b =>
                {
                    b.Property<double?>("Balance")
                        .HasColumnName("BALANCE")
                        .HasColumnType("double precision");

                    b.Property<int?>("BankId")
                        .HasColumnName("BANK_ID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("BankTransactionId")
                        .HasColumnName("BANK_TRANSACTION_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ChequeNo")
                        .HasColumnName("CHEQUE_NO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<double?>("CrAmt")
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("DrAmt")
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TransactionDate")
                        .HasColumnName("TRANSACTION_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("TransactionDateEn")
                        .HasColumnName("TRANSACTION_DATE_EN")
                        .HasColumnType("date");

                    b.ToTable("ACC_BANK_STATEMENT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBankTrans", b =>
                {
                    b.Property<decimal>("BankTransId")
                        .HasColumnName("BANK_TRANS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BankId")
                        .HasColumnName("BANK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BillId")
                        .HasColumnName("BILL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("CrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("DrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<string>("IsOfLastyear")
                        .HasColumnName("IS_OF_LASTYEAR")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("TransTypeId")
                        .HasColumnName("TRANS_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNep")
                        .HasColumnName("VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("BankTransId")
                        .HasName("ACC_BANK_TRANS_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex("BillId");

                    b.HasIndex("VchrId");

                    b.ToTable("ACC_BANK_TRANS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBgtAllocate", b =>
                {
                    b.Property<decimal>("BgtAllocateId")
                        .HasColumnName("BGT_ALLOCATE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AllocatedDateNp")
                        .HasColumnName("ALLOCATED_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("EntryDatetime")
                        .HasColumnName("ENTRY_DATETIME")
                        .HasColumnType("date");

                    b.Property<decimal?>("EntryUserId")
                        .HasColumnName("ENTRY_USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("RevisedAmount")
                        .HasColumnName("REVISED_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnName("UPDATE_DATETIME")
                        .HasColumnType("date");

                    b.Property<decimal?>("UpdateUserId")
                        .HasColumnName("UPDATE_USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("BgtAllocateId")
                        .HasName("ACC_BGT_ALLOCATE_pkey");

                    b.ToTable("ACC_BGT_ALLOCATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBgtRvsn", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtAlctnId")
                        .HasColumnName("BGT_ALCTN_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RvsnDateNp")
                        .HasColumnName("RVSN_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("RvsnReason")
                        .HasColumnName("RVSN_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnName("UPDATE_DATETIME")
                        .HasColumnType("date");

                    b.Property<decimal?>("UpdateUserId")
                        .HasColumnName("UPDATE_USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BgtAlctnId");

                    b.ToTable("ACC_BGT_RVSN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBgtTransfer", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtAlctnId")
                        .HasColumnName("BGT_ALCTN_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("FromAccId")
                        .HasColumnName("FROM_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ToAccId")
                        .HasColumnName("TO_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TrnsfrDateNp")
                        .HasColumnName("TRNSFR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TrnsfrReason")
                        .HasColumnName("TRNSFR_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdateDatetime")
                        .HasColumnName("UPDATE_DATETIME")
                        .HasColumnType("date");

                    b.Property<decimal?>("UpdateUserId")
                        .HasColumnName("UPDATE_USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BgtAlctnId");

                    b.HasIndex("FromAccId");

                    b.HasIndex("ToAccId");

                    b.ToTable("ACC_BGT_TRANSFER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBudjetSource", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("MinAccId")
                        .HasColumnName("MIN_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SourceId")
                        .HasColumnName("SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id")
                        .HasName("ACC_BUDJET_SOURCE_pkey");

                    b.HasIndex("MinAccId");

                    b.HasIndex("SourceId");

                    b.ToTable("ACC_BUDJET_SOURCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccCashTrans", b =>
                {
                    b.Property<decimal>("CashTransId")
                        .HasColumnName("CASH_TRANS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BillId")
                        .HasColumnName("BILL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("CrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("DrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<decimal?>("IncomeExpTypeId")
                        .HasColumnName("INCOME_EXP_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsOfLastyear")
                        .HasColumnName("IS_OF_LASTYEAR")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("VchrDateNep")
                        .HasColumnName("VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("CashTransId")
                        .HasName("ACC_CASH_TRANS_pkey");

                    b.HasIndex("BillId");

                    b.HasIndex("VchrId");

                    b.ToTable("ACC_CASH_TRANS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccChequeTypes", b =>
                {
                    b.Property<short>("ChequeTypeId")
                        .HasColumnName("CHEQUE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("ChequeType")
                        .HasColumnName("CHEQUE_TYPE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("ChequeTypeId")
                        .HasName("ACC_CHEQUE_TYPES_pkey");

                    b.ToTable("ACC_CHEQUE_TYPES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccCurrencty", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("text");

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnName("SYMBOL")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("ACC_CURRENCTY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccCurrenctyRate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CurrencyId")
                        .HasColumnName("CURRENCY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NpDate")
                        .HasColumnName("NP_DATE")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("ACC_CURRENCTY_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccDhrtiBillDtl", b =>
                {
                    b.Property<decimal>("DhrtiDtlId")
                        .HasColumnName("DHRTI_DTL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("BillDateNp")
                        .HasColumnName("BILL_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("BillNo")
                        .HasColumnName("BILL_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CounterId")
                        .HasColumnName("COUNTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DhrtiMasterId")
                        .HasColumnName("DHRTI_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrderInBill")
                        .HasColumnName("ORDER_IN_BILL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("DhrtiDtlId")
                        .HasName("ACC_DHRTI_BILL_DTL_pkey");

                    b.HasIndex("AccId");

                    b.HasIndex("VchrId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_DHRTI_BILL_DTL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccDhrtiBillMaster", b =>
                {
                    b.Property<decimal>("DhrtiMasterId")
                        .HasColumnName("DHRTI_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("BankAmt")
                        .HasColumnName("BANK_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("BillNo")
                        .HasColumnName("BILL_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("BillNoManual")
                        .HasColumnName("BILL_NO_MANUAL")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Billtypeid")
                        .HasColumnName("BILLTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BllDateNp")
                        .HasColumnName("BLL_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CancelDate")
                        .HasColumnName("CANCEL_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CancelReason")
                        .HasColumnName("CANCEL_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("CashAmt")
                        .HasColumnName("CASH_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("CounterId")
                        .HasColumnName("COUNTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("DateEditTime")
                        .HasColumnName("DATE_EDIT_TIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateEntryTime")
                        .HasColumnName("DATE_ENTRY_TIME")
                        .HasColumnType("date");

                    b.Property<string>("DateEntryVsDate")
                        .HasColumnName("DATE_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("DhrtiMasterId")
                        .HasName("ACC_DHRTI_BILL_MASTER_pkey");

                    b.HasIndex("Billtypeid");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("VchrId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_DHRTI_BILL_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccExpensesDetails", b =>
                {
                    b.Property<decimal>("ExpenseId")
                        .HasColumnName("EXPENSE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Advexptype")
                        .HasColumnName("ADVEXPTYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("CrAmt")
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("DrAmt")
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("OrderInPaymentSlip")
                        .HasColumnName("ORDER_IN_PAYMENT_SLIP")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PadadhikariId")
                        .HasColumnName("PADADHIKARI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentSlipId")
                        .HasColumnName("PAYMENT_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TransTypeId")
                        .HasColumnName("TRANS_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UcId")
                        .HasColumnName("UC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("VatAmt")
                        .HasColumnName("VAT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WardId")
                        .HasColumnName("WARD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("ExpenseId")
                        .HasName("ACC_EXPENSES_DETAILS_pkey");

                    b.HasIndex("AccId");

                    b.HasIndex("PaymentSlipId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("TransTypeId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_EXPENSES_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccFundProvidrMstr", b =>
                {
                    b.Property<decimal>("ProviderId")
                        .HasColumnName("PROVIDER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Chairman")
                        .HasColumnName("CHAIRMAN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("ContactPerson")
                        .HasColumnName("CONTACT_PERSON")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProviderId")
                        .HasName("ACC_FUND_PROVIDR_MSTR_pkey");

                    b.ToTable("ACC_FUND_PROVIDR_MSTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccIncomeRate", b =>
                {
                    b.Property<decimal>("RateId")
                        .HasColumnName("RATE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("RateId")
                        .HasName("ACC_INCOME_RATE_pkey");

                    b.ToTable("ACC_INCOME_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccLastYrPeski", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AdvanceType")
                        .HasColumnName("ADVANCE_TYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("TotalPesRem")
                        .HasColumnName("TOTAL_PES_REM")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("ACC_LAST_YR_PESKI_pkey");

                    b.ToTable("ACC_LAST_YR_PESKI");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccLastyearAdvDetails", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("AddUserId")
                        .HasColumnName("ADD_USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("DrAmount")
                        .HasColumnName("DR_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("LastYrPeskiId")
                        .HasColumnName("LAST_YR_PESKI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentTypeId")
                        .HasColumnName("PAYMENT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("VhcrId")
                        .HasColumnName("VHCR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VoucherDate")
                        .HasColumnName("VOUCHER_DATE")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("VoucherNo")
                        .HasColumnName("VOUCHER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("ACC_LASTYEAR_ADV_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccOrgMaster", b =>
                {
                    b.Property<decimal>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Head")
                        .HasColumnName("HEAD")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Ministry")
                        .HasColumnName("MINISTRY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MobileNo")
                        .HasColumnName("MOBILE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("OrcAccTypeId")
                        .HasColumnName("ORC_ACC_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgMasterId")
                        .HasColumnName("ORG_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PanNo")
                        .HasColumnName("PAN_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("RegNo")
                        .HasColumnName("REG_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("RelatedPerson")
                        .HasColumnName("RELATED_PERSON")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Sapati")
                        .HasColumnName("SAPATI")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("VatNo")
                        .HasColumnName("VAT_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Vdc")
                        .HasColumnName("VDC")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Zone")
                        .HasColumnName("ZONE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("OrgId")
                        .HasName("ACC_ORG_MASTER_pkey");

                    b.ToTable("ACC_ORG_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPadadhikariMstr", b =>
                {
                    b.Property<decimal>("PadadikariId")
                        .HasColumnName("PADADIKARI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CitizenshipNo")
                        .HasColumnName("CITIZENSHIP_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("CitznIssuedDate")
                        .HasColumnName("CITZN_ISSUED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("CitznIssuedDistrId")
                        .HasColumnName("CITZN_ISSUED_DISTR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CurrentPostAppointDate")
                        .HasColumnName("CURRENT_POST_APPOINT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateOfBirth")
                        .HasColumnName("DATE_OF_BIRTH")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DateOfBirthAd")
                        .HasColumnName("DATE_OF_BIRTH_AD")
                        .HasColumnType("date");

                    b.Property<decimal?>("DistrictId")
                        .HasColumnName("DISTRICT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ElectedDateNp")
                        .HasColumnName("ELECTED_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstAppointDate")
                        .HasColumnName("FIRST_APPOINT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FirstAppointPostId")
                        .HasColumnName("FIRST_APPOINT_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("GfOcupation")
                        .HasColumnName("GF_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("GrandfatherName")
                        .HasColumnName("GRANDFATHER_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("IsToiletInHome")
                        .HasColumnName("IS_TOILET_IN_HOME")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("LastNameEn")
                        .HasColumnName("LAST_NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastNameNp")
                        .HasColumnName("LAST_NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MarriedStatus")
                        .HasColumnName("MARRIED_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Mobile")
                        .HasColumnName("MOBILE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNo")
                        .HasColumnName("MOBILE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("MotherLangId")
                        .HasColumnName("MOTHER_LANG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("NoOfDaughter")
                        .HasColumnName("NO_OF_DAUGHTER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NoOfSon")
                        .HasColumnName("NO_OF_SON")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("POcupation")
                        .HasColumnName("P_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ParentName")
                        .HasColumnName("PARENT_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PreExperience")
                        .HasColumnName("PRE_EXPERIENCE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Qualification")
                        .HasColumnName("QUALIFICATION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ReligionId")
                        .HasColumnName("RELIGION_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RetireDate")
                        .HasColumnName("RETIRE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("SOcupation")
                        .HasColumnName("S_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("SpouseName")
                        .HasColumnName("SPOUSE_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Street")
                        .HasColumnName("STREET")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("TrackId")
                        .HasColumnName("TRACK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VdcId")
                        .HasColumnName("VDC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ZoneId")
                        .HasColumnName("ZONE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PadadikariId")
                        .HasName("ACC_PADADHIKARI_MSTR_pkey");

                    b.HasIndex("PostId");

                    b.ToTable("ACC_PADADHIKARI_MSTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPadadhikariPost", b =>
                {
                    b.Property<decimal>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DurationInYrs")
                        .HasColumnName("DURATION_IN_YRS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("PostLevel")
                        .HasColumnName("POST_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PostId")
                        .HasName("ACC_PADADHIKARI_POST_pkey");

                    b.ToTable("ACC_PADADHIKARI_POST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentClearance", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("BudgetAccId");

                    b.ToTable("ACC_PAYMENT_CLEARANCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentCredit", b =>
                {
                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("ACC_PAYMENT_CREDIT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentDeduction", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Deductiontype")
                        .HasColumnName("DEDUCTIONTYPE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Status")
                        .HasColumnName("STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("BudgetAccId");

                    b.HasIndex("PaymentId");

                    b.ToTable("ACC_PAYMENT_DEDUCTION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentDetails", b =>
                {
                    b.Property<decimal>("PaymentDetailId")
                        .HasColumnName("PAYMENT_DETAIL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AdvanceType")
                        .HasColumnName("ADVANCE_TYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Advexptype")
                        .HasColumnName("ADVEXPTYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("CrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<double?>("DrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ExpireDateNp")
                        .HasColumnName("EXPIRE_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("OrderInPaymentSlip")
                        .HasColumnName("ORDER_IN_PAYMENT_SLIP")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PadadhikariId")
                        .HasColumnName("PADADHIKARI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentSlipId")
                        .HasColumnName("PAYMENT_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SupplierId")
                        .HasColumnName("SUPPLIER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TransTypeId")
                        .HasColumnName("TRANS_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UcId")
                        .HasColumnName("UC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("VatAmt")
                        .HasColumnName("VAT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WardId")
                        .HasColumnName("WARD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PaymentDetailId")
                        .HasName("ACC_PAYMENT_DETAILS_pkey");

                    b.HasIndex("AccId");

                    b.HasIndex("BudgetAccId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("TransTypeId");

                    b.HasIndex("VchrId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_PAYMENT_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentMaster", b =>
                {
                    b.Property<decimal>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccDeductDepVchrDate")
                        .HasColumnName("ACC_DEDUCT_DEP_VCHR_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("AccDeductDepVchrId")
                        .HasColumnName("ACC_DEDUCT_DEP_VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AdvClearedFromBank")
                        .HasColumnName("ADV_CLEARED_FROM_BANK")
                        .HasColumnType("double precision");

                    b.Property<double?>("AdvClearedFromBill")
                        .HasColumnName("ADV_CLEARED_FROM_BILL")
                        .HasColumnType("double precision");

                    b.Property<double?>("AdvClearedFromCash")
                        .HasColumnName("ADV_CLEARED_FROM_CASH")
                        .HasColumnType("double precision");

                    b.Property<string>("Advexptype")
                        .HasColumnName("ADVEXPTYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("BillAmt")
                        .HasColumnName("BILL_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("BillNo")
                        .HasColumnName("BILL_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("CashPayment")
                        .HasColumnName("CASH_PAYMENT")
                        .HasColumnType("double precision");

                    b.Property<double?>("ChequePayment")
                        .HasColumnName("CHEQUE_PAYMENT")
                        .HasColumnType("double precision");

                    b.Property<double?>("ContractTaxDeduction")
                        .HasColumnName("CONTRACT_TAX_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<double?>("CrAmount")
                        .HasColumnName("CR_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("DeductDepVchrDateNep")
                        .HasColumnName("DEDUCT_DEP_VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DeductDepVchrId")
                        .HasColumnName("DEDUCT_DEP_VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ExpireDateNp")
                        .HasColumnName("EXPIRE_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("IncomeTaxDeduction")
                        .HasColumnName("INCOME_TAX_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("Ispeski")
                        .HasColumnName("ISPESKI")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("LastYearsAdvDeduction")
                        .HasColumnName("LAST_YEARS_ADV_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromBank")
                        .HasColumnName("LY_ADV_CLEARED_FROM_BANK")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromBill")
                        .HasColumnName("LY_ADV_CLEARED_FROM_BILL")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromCash")
                        .HasColumnName("LY_ADV_CLEARED_FROM_CASH")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherDeduction")
                        .HasColumnName("OTHER_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentDescription")
                        .HasColumnName("PAYMENT_DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RetentionMoneyEduction")
                        .HasColumnName("RETENTION_MONEY_EDUCTION")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubjectAreaId")
                        .HasColumnName("SUBJECT_AREA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TransTypeId")
                        .HasColumnName("TRANS_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("VatAmt")
                        .HasColumnName("VAT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("VatDeduction")
                        .HasColumnName("VAT_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PaymentId")
                        .HasName("ACC_PAYMENT_MASTER_pkey");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TransTypeId");

                    b.HasIndex("VchrId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_PAYMENT_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccReceivable", b =>
                {
                    b.Property<double?>("Additionalcharges")
                        .HasColumnName("ADDITIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Taxtype")
                        .HasColumnName("TAXTYPE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<int?>("Type")
                        .HasColumnName("TYPE")
                        .HasColumnType("integer");

                    b.Property<string>("VchrDate")
                        .HasColumnName("VCHR_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Vchrid")
                        .HasColumnName("VCHRID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("ACC_RECEIVABLE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccSubModuleType", b =>
                {
                    b.Property<decimal>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccExpencesCode")
                        .HasColumnName("ACC_EXPENCES_CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BudgetAccNo")
                        .HasColumnName("BUDGET_ACC_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Iscapital")
                        .HasColumnName("ISCAPITAL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Isexpences")
                        .HasColumnName("ISEXPENCES")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("SubModuleId")
                        .HasName("ACC_SUB_MODULE_TYPE_pkey");

                    b.ToTable("ACC_SUB_MODULE_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccTransType", b =>
                {
                    b.Property<decimal>("TypeId")
                        .HasColumnName("TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("NepName")
                        .IsRequired()
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasColumnName("TYPE_CODE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("TypeId")
                        .HasName("ACC_TRANS_TYPE_pkey");

                    b.ToTable("ACC_TRANS_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccUnauthorised", b =>
                {
                    b.Property<decimal>("UnauthorisedId")
                        .HasColumnName("UNAUTHORISED_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("FilledbyEmpid")
                        .HasColumnName("FILLEDBY_EMPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("InspectAmt")
                        .HasColumnName("INSPECT_AMT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("InspectDate")
                        .HasColumnName("INSPECT_DATE")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("InspectDetails")
                        .HasColumnName("INSPECT_DETAILS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UnauthorisedAmt")
                        .HasColumnName("UNAUTHORISED_AMT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UnauthorisedDafaId")
                        .HasColumnName("UNAUTHORISED_DAFA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VerifiedbyEmpid")
                        .HasColumnName("VERIFIEDBY_EMPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("UnauthorisedId")
                        .HasName("ACC_UNAUTHORISED_pkey");

                    b.ToTable("ACC_UNAUTHORISED");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccUserComiteMstr", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Chairman")
                        .HasColumnName("CHAIRMAN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("ConcernPerson")
                        .HasColumnName("CONCERN_PERSON")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("MobileNo")
                        .HasColumnName("MOBILE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Ward")
                        .HasColumnName("WARD")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("ACC_USER_COMITE_MSTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccVchrDetails", b =>
                {
                    b.Property<decimal>("VchrDetailId")
                        .HasColumnName("VCHR_DETAIL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccType")
                        .IsRequired()
                        .HasColumnName("ACC_TYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BillId")
                        .HasColumnName("BILL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("CrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<double?>("DrAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DR_AMT")
                        .HasColumnType("double precision")
                        .HasDefaultValueSql("'0'::double precision");

                    b.Property<string>("ExpireDateNp")
                        .HasColumnName("EXPIRE_DATE_NP")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("IdFromSrc")
                        .HasColumnName("ID_FROM_SRC")
                        .HasColumnType("integer");

                    b.Property<string>("IsGroup")
                        .HasColumnName("IS_GROUP")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsJafat")
                        .HasColumnName("IS_JAFAT")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsPosted")
                        .HasColumnName("IS_POSTED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TransTypeId")
                        .HasColumnName("TRANS_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("VchrDateEng")
                        .HasColumnName("VCHR_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("VchrDateNep")
                        .HasColumnName("VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VchrTypeId")
                        .HasColumnName("VCHR_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("VchrDetailId")
                        .HasName("ACC_VCHR_DETAILS_pkey");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("TransTypeId");

                    b.HasIndex("VchrId");

                    b.HasIndex("VchrTypeId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_VCHR_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccVchrMaster", b =>
                {
                    b.Property<decimal>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AsuliAmt")
                        .HasColumnName("ASULI_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("ChequeTypeId")
                        .HasColumnName("CHEQUE_TYPE_ID")
                        .HasColumnType("smallint");

                    b.Property<string>("ContactPhone")
                        .HasColumnName("CONTACT_PHONE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasColumnName("FATHER_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("GrandFatherName")
                        .HasColumnName("GRAND_FATHER_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("InternalLekha")
                        .HasColumnName("INTERNAL_LEKHA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IsNikash")
                        .HasColumnName("IS_NIKASH")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsPosted")
                        .HasColumnName("IS_POSTED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<double?>("NValidAmt")
                        .HasColumnName("N_VALID_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("NameChequePayee")
                        .HasColumnName("NAME_CHEQUE_PAYEE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Narration")
                        .HasColumnName("NARRATION")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("NiyamitAmt")
                        .HasColumnName("NIYAMIT_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("UPDATE_DATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ValidAmt")
                        .HasColumnName("VALID_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("VchrDateNep")
                        .HasColumnName("VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrNo")
                        .HasColumnName("VCHR_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VchrTypeId")
                        .HasColumnName("VCHR_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("VchrId")
                        .HasName("ACC_VCHR_MASTER_pkey");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("VchrTypeId");

                    b.ToTable("ACC_VCHR_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccVchrTypeMaster", b =>
                {
                    b.Property<decimal>("VchrTypeId")
                        .HasColumnName("VCHR_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Isautomatic")
                        .HasColumnName("ISAUTOMATIC")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Isfixed")
                        .HasColumnName("ISFIXED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("VchrTypeId")
                        .HasName("ACC_VCHR_TYPE_MASTER_pkey");

                    b.ToTable("ACC_VCHR_TYPE_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccWorkFundsDetail", b =>
                {
                    b.Property<decimal>("FundDetailId")
                        .HasColumnName("FUND_DETAIL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("FundedAmt")
                        .HasColumnName("FUNDED_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("FundedPercent")
                        .HasColumnName("FUNDED_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Isjanasaramdha")
                        .HasColumnName("ISJANASARAMDHA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Isownoffice")
                        .HasColumnName("ISOWNOFFICE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ProviderId")
                        .HasColumnName("PROVIDER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("FundDetailId")
                        .HasName("ACC_WORK_FUNDS_DETAIL_pkey");

                    b.HasIndex("ProviderId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_WORK_FUNDS_DETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccWorkMaster", b =>
                {
                    b.Property<decimal>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AgreementAmt")
                        .HasColumnName("AGREEMENT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("AgreementDate")
                        .HasColumnName("AGREEMENT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("AgreementExpiryDate")
                        .HasColumnName("AGREEMENT_EXPIRY_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("AgreementParty")
                        .HasColumnName("AGREEMENT_PARTY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("AgreementSigningPerson")
                        .HasColumnName("AGREEMENT_SIGNING_PERSON")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<double?>("BankGuaranteeAmt")
                        .HasColumnName("BANK_GUARANTEE_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("CorrectedAmt")
                        .HasColumnName("CORRECTED_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("DeadlineDate")
                        .HasColumnName("DEADLINE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("DepositAmt")
                        .HasColumnName("DEPOSIT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("DepositReleaseDate")
                        .HasColumnName("DEPOSIT_RELEASE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DepositReleasedDate")
                        .HasColumnName("DEPOSIT_RELEASED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DepositsAccId")
                        .HasColumnName("DEPOSITS_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DepositsForfeitAccId")
                        .HasColumnName("DEPOSITS_FORFEIT_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("EstimatedAmt")
                        .HasColumnName("ESTIMATED_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("FinalActualAmtTobePaid")
                        .HasColumnName("FINAL_ACTUAL_AMT_TOBE_PAID")
                        .HasColumnType("double precision");

                    b.Property<string>("IsCompleted")
                        .HasColumnName("IS_COMPLETED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IsKramagat")
                        .HasColumnName("IS_KRAMAGAT")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("MeasureBookNo")
                        .HasColumnName("MEASURE_BOOK_NO")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("PartyId")
                        .HasColumnName("PARTY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PartyPersontypeid")
                        .HasColumnName("PARTY_PERSONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonPersontypeid")
                        .HasColumnName("PERSON_PERSONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("TotalActualCost")
                        .HasColumnName("TOTAL_ACTUAL_COST")
                        .HasColumnType("double precision");

                    b.Property<string>("TpNo")
                        .HasColumnName("TP_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<double?>("VariationAmt")
                        .HasColumnName("VARIATION_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WorkCompleteDate")
                        .HasColumnName("WORK_COMPLETE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("YojanaNaturId")
                        .HasColumnName("YOJANA_NATUR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("WorkId")
                        .HasName("ACC_WORK_MASTER_pkey");

                    b.ToTable("ACC_WORK_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccWorkPaymntTrans", b =>
                {
                    b.Property<decimal>("TransId")
                        .HasColumnName("TRANS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("BillAmt")
                        .HasColumnName("BILL_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("IsOfLastYear")
                        .HasColumnName("IS_OF_LAST_YEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PadadhikariId")
                        .HasColumnName("PADADHIKARI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentSlipId")
                        .HasColumnName("PAYMENT_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UcId")
                        .HasColumnName("UC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("VatAmt")
                        .HasColumnName("VAT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("TransId")
                        .HasName("ACC_WORK_PAYMNT_TRANS_pkey");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("VchrId");

                    b.HasIndex("WorkId");

                    b.ToTable("ACC_WORK_PAYMNT_TRANS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Accode", b =>
                {
                    b.Property<decimal>("Accode1")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Grcode")
                        .HasColumnName("GRCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isassigned")
                        .HasColumnName("ISASSIGNED")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Isdollar")
                        .HasColumnName("ISDOLLAR")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Localcode")
                        .HasColumnName("LOCALCODE")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Sbcode")
                        .HasColumnName("SBCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Trantype")
                        .HasColumnName("TRANTYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.HasKey("Accode1")
                        .HasName("ACCODE_pkey");

                    b.ToTable("ACCODE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.ApplicationConfiguration", b =>
                {
                    b.Property<short>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("smallint");

                    b.Property<string>("NameConfig")
                        .HasColumnName("NAME_CONFIG")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("ValueConfig")
                        .HasColumnName("VALUE_CONFIG")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Sn")
                        .HasName("APPLICATION_CONFIGURATION_pkey");

                    b.ToTable("APPLICATION_CONFIGURATION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.BankBranch", b =>
                {
                    b.Property<decimal>("BranchId")
                        .HasColumnName("BRANCH_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BranchCode")
                        .HasColumnName("BRANCH_CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IsPermitted")
                        .HasColumnName("IS_PERMITTED")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("BranchId")
                        .HasName("BANK_BRANCH_pkey");

                    b.HasIndex("Bankid");

                    b.ToTable("BANK_BRANCH");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Bankmaster", b =>
                {
                    b.Property<decimal>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Accountnumber")
                        .HasColumnName("ACCOUNTNUMBER")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Bankcode")
                        .HasColumnName("BANKCODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Bankname")
                        .HasColumnName("BANKNAME")
                        .HasColumnType("text");

                    b.Property<string>("Branch")
                        .HasColumnName("BRANCH")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Branchcode")
                        .HasColumnName("BRANCHCODE")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Cycode")
                        .HasColumnName("CYCODE")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("FinancelInstituteId")
                        .HasColumnName("FINANCEL_INSTITUTE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Trancode")
                        .HasColumnName("TRANCODE")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Bankid")
                        .HasName("BANKMASTER_pkey");

                    b.ToTable("BANKMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Banktransactions", b =>
                {
                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ChequeTypeId")
                        .HasColumnName("CHEQUE_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Cramount")
                        .HasColumnName("CRAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<decimal?>("DhrtiMasterId")
                        .HasColumnName("DHRTI_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Dramount")
                        .HasColumnName("DRAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ExpSlipId")
                        .HasColumnName("EXP_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Incomeexptypeid")
                        .HasColumnName("INCOMEEXPTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isoflastyear")
                        .HasColumnName("ISOFLASTYEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Module")
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Orderinpaymentslip")
                        .HasColumnName("ORDERINPAYMENTSLIP")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Payeename")
                        .HasColumnName("PAYEENAME")
                        .HasColumnType("text");

                    b.Property<string>("PayeenameEng")
                        .HasColumnName("PAYEENAME_ENG")
                        .HasColumnType("text");

                    b.Property<string>("PaymentOrderNo")
                        .HasColumnName("PAYMENT_ORDER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("SubmoduleTypeId")
                        .HasColumnName("SUBMODULE_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("BANKTRANSACTIONS_pkey");

                    b.HasIndex("DhrtiMasterId");

                    b.HasIndex("SubmoduleTypeId");

                    b.HasIndex("VchrId");

                    b.ToTable("BANKTRANSACTIONS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.BudjetSource", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("CountryId")
                        .HasColumnName("COUNTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ParentId")
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("BUDJET_SOURCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.BudjetSubHead", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MinistryCode")
                        .HasColumnName("MINISTRY_CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("ParentCode")
                        .HasColumnName("PARENT_CODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("BUDJET_SUB_HEAD_CODE_key");

                    b.ToTable("BUDJET_SUB_HEAD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.BusinessmasterHistory", b =>
                {
                    b.Property<DateTime?>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("BizId")
                        .HasColumnName("BIZ_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Businessgroupid")
                        .HasColumnName("BUSINESSGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ComputerName")
                        .HasColumnName("COMPUTER_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DataStatus")
                        .HasColumnName("DATA_STATUS")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TranTime")
                        .HasColumnName("TRAN_TIME")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("WindowsUser")
                        .HasColumnName("WINDOWS_USER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("BUSINESSMASTER_HISTORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Cashtransaction", b =>
                {
                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Cramount")
                        .HasColumnName("CRAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<decimal?>("DhrtiMasterId")
                        .HasColumnName("DHRTI_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Dramount")
                        .HasColumnName("DRAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ExpSlipId")
                        .HasColumnName("EXP_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Incomeexptypeid")
                        .HasColumnName("INCOMEEXPTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isoflastyear")
                        .HasColumnName("ISOFLASTYEAR")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Module")
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("SubmoduleTypeId")
                        .HasColumnName("SUBMODULE_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("CASHTRANSACTION_pkey");

                    b.HasIndex("DhrtiMasterId");

                    b.HasIndex("SubmoduleTypeId");

                    b.HasIndex("VchrId");

                    b.ToTable("CASHTRANSACTION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Celedger20682069", b =>
                {
                    b.Property<decimal?>("Calculatedvalue")
                        .HasColumnName("CALCULATEDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Constructionid")
                        .HasColumnName("CONSTRUCTIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Constructiontypeid")
                        .HasColumnName("CONSTRUCTIONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Deppercent")
                        .HasColumnName("DEPPERCENT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Depreciationamount")
                        .HasColumnName("DEPRECIATIONAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Netcalculatedvalue")
                        .HasColumnName("NETCALCULATEDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Noncompletionreasonid")
                        .HasColumnName("NONCOMPLETIONREASONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Noncompletionreasons")
                        .HasColumnName("NONCOMPLETIONREASONS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Otherminusinevaluations")
                        .HasColumnName("OTHERMINUSINEVALUATIONS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Otherplusinevaluations")
                        .HasColumnName("OTHERPLUSINEVALUATIONS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Otherplusminusdescriptions")
                        .HasColumnName("OTHERPLUSMINUSDESCRIPTIONS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Spacemeasuringunit")
                        .HasColumnName("SPACEMEASURINGUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Talanumber")
                        .HasColumnName("TALANUMBER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Taxed")
                        .HasColumnName("TAXED")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Totalarea")
                        .HasColumnName("TOTALAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Vsdateofmade")
                        .HasColumnName("VSDATEOFMADE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("CELEDGER20682069");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Collectioncounters", b =>
                {
                    b.Property<decimal>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CmptrName")
                        .HasColumnName("CMPTR_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Counterheadid")
                        .HasColumnName("COUNTERHEADID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Location")
                        .HasColumnName("LOCATION")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Macaddress")
                        .HasColumnName("MACADDRESS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Counterid")
                        .HasName("COLLECTIONCOUNTERS_pkey");

                    b.ToTable("COLLECTIONCOUNTERS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Constantvalues", b =>
                {
                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Strvalue")
                        .HasColumnName("STRVALUE")
                        .HasColumnType("text");

                    b.Property<string>("Varname")
                        .HasColumnName("VARNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("CONSTANTVALUES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Contacts", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("CONTACTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("COUNTRY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Ddc", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("DDC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.DevRegion", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("DEV_REGION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.District", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Zoneid")
                        .HasColumnName("ZONEID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("DISTRICT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.EmpGrp", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("EMP_GRP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Firebrigadestate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Minimumservicecharge")
                        .HasColumnName("MINIMUMSERVICECHARGE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Servicechargerate")
                        .HasColumnName("SERVICECHARGERATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Type")
                        .HasColumnName("TYPE")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("FIREBRIGADESTATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Fiscalyears", b =>
                {
                    b.Property<string>("Datefrom")
                        .HasColumnName("DATEFROM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Dateto")
                        .HasColumnName("DATETO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("FISCALYEARS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Fywiserentdarrate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Ratename")
                        .HasColumnName("RATENAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("RentPer")
                        .HasColumnName("RENT_PER")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("RentTypeid")
                        .HasColumnName("RENT_TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("FYWISERENTDARRATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.FywisesanitationRate", b =>
                {
                    b.Property<decimal?>("AreaUpto")
                        .HasColumnName("AREA_UPTO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EachAreaRate")
                        .HasColumnName("EACH_AREA_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ForEachArea")
                        .HasColumnName("FOR_EACH_AREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Ratename")
                        .HasColumnName("RATENAME")
                        .HasColumnType("text");

                    b.Property<decimal?>("RoadTypeid")
                        .HasColumnName("ROAD_TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Subgroupid")
                        .HasColumnName("SUBGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("FYWISESANITATION_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.ImisMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuName")
                        .HasColumnType("varchar(250)");

                    b.Property<int>("MenuOrder")
                        .HasColumnType("integer");

                    b.Property<string>("MenuUrl")
                        .HasColumnType("varchar(500)");

                    b.Property<int>("ParentMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Imis_Menu");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Incomebilldetails", b =>
                {
                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BackupPersonid")
                        .HasColumnName("BACKUP_PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Orderinbill")
                        .HasColumnName("ORDERINBILL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Personid")
                        .HasColumnName("PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Project")
                        .HasColumnName("PROJECT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TaxType")
                        .HasColumnName("TAX_TYPE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Taxaddtnlid")
                        .HasColumnName("TAXADDTNLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("INCOMEBILLDETAILS_pkey");

                    b.HasIndex("AccId");

                    b.HasIndex("VchrId");

                    b.ToTable("INCOMEBILLDETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.IncomebilldetailsHistory", b =>
                {
                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BackupPersonid")
                        .HasColumnName("BACKUP_PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ComputerName")
                        .HasColumnName("COMPUTER_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DataStatus")
                        .HasColumnName("DATA_STATUS")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Orderinbill")
                        .HasColumnName("ORDERINBILL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Personid")
                        .HasColumnName("PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Project")
                        .HasColumnName("PROJECT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SnIncomebilldtl")
                        .HasColumnName("SN_INCOMEBILLDTL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TaxType")
                        .HasColumnName("TAX_TYPE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Taxaddtnlid")
                        .HasColumnName("TAXADDTNLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TranTime")
                        .HasColumnName("TRAN_TIME")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Vrno")
                        .HasColumnName("VRNO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WindowsUser")
                        .HasColumnName("WINDOWS_USER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("INCOMEBILLDETAILS_HISTORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Incomebillmaster", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("BackupPersonid")
                        .HasColumnName("BACKUP_PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Bankamount")
                        .HasColumnName("BANKAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BillNoManual")
                        .HasColumnName("BILL_NO_MANUAL")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Billtypeid")
                        .HasColumnName("BILLTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CancelDate")
                        .HasColumnName("CANCEL_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CancelReason")
                        .HasColumnName("CANCEL_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Cashamount")
                        .HasColumnName("CASHAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CurrencyId")
                        .HasColumnName("CURRENCY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .HasColumnName("NAME")
                        .HasColumnType("text");

                    b.Property<decimal?>("Personid")
                        .HasColumnName("PERSONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Project")
                        .HasColumnName("PROJECT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Taxincometype")
                        .HasColumnName("TAXINCOMETYPE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("smallint");

                    b.HasKey("Sn")
                        .HasName("INCOMEBILLMASTER_pkey");

                    b.HasIndex("Billtypeid");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("VchrId");

                    b.ToTable("INCOMEBILLMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvApplicantRate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Applicantid")
                        .HasColumnName("APPLICANTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemDetailId")
                        .HasColumnName("ITEM_DETAIL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_APPLICANT_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvBrand", b =>
                {
                    b.Property<decimal>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("BrandId")
                        .HasName("INV_BRAND_pkey");

                    b.ToTable("INV_BRAND");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvDeplist", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("DeductAmt")
                        .HasColumnName("DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("DepreAmt")
                        .HasColumnName("DEPRE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("DepreDuraton")
                        .HasColumnName("DEPRE_DURATON")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("DeprePer")
                        .HasColumnName("DEPRE_PER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("MaxDepreAmt")
                        .HasColumnName("MAX_DEPRE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("MinDepreAmt")
                        .HasColumnName("MIN_DEPRE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("NetAmt")
                        .HasColumnName("NET_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("PurchaseAmt")
                        .HasColumnName("PURCHASE_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("PurchaseDate")
                        .HasColumnName("PURCHASE_DATE")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_DEPLIST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvDepreciation", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DeprePer")
                        .HasColumnName("DEPRE_PER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("DepreRate")
                        .HasColumnName("DEPRE_RATE")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("OrginalRate")
                        .HasColumnName("ORGINAL_RATE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_DEPRECIATION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvDept", b =>
                {
                    b.Property<decimal>("DeptId")
                        .HasColumnName("DEPT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("OfficeId")
                        .HasColumnName("OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("DeptId")
                        .HasName("INV_DEPT_pkey");

                    b.ToTable("INV_DEPT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsAdjust", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("AcceptDtEng")
                        .HasColumnName("ACCEPT_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("AcceptDtNp")
                        .HasColumnName("ACCEPT_DT_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AdjDtEng")
                        .HasColumnName("ADJ_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("AdjDtNp")
                        .HasColumnName("ADJ_DT_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("AdjQty")
                        .HasColumnName("ADJ_QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("AdjTypeId")
                        .HasColumnName("ADJ_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BudgetYear")
                        .HasColumnName("BUDGET_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("GdAdjId")
                        .IsRequired()
                        .HasColumnName("GD_ADJ_ID")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("ItemAdjRate")
                        .HasColumnName("ITEM_ADJ_RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemType")
                        .HasColumnName("ITEM_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("PrepDtEng")
                        .HasColumnName("PREP_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("PrepDtNp")
                        .HasColumnName("PREP_DT_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptBy");

                    b.HasIndex("BrandId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrepBy");

                    b.HasIndex("SpecId");

                    b.ToTable("INV_GOODS_ADJUST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsRecDetl", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("DakhilaDtEng")
                        .HasColumnName("DAKHILA_DT_ENG")
                        .HasColumnType("date");

                    b.Property<double?>("DiscAmt")
                        .HasColumnName("DISC_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("GoodsMasterId")
                        .HasColumnName("GOODS_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isnumbered")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ISNUMBERED")
                        .HasColumnType("character varying(1)")
                        .HasDefaultValueSql("'0'::character varying")
                        .HasMaxLength(1);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("NetAmt")
                        .HasColumnName("NET_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherExpencesAmt")
                        .HasColumnName("OTHER_EXPENCES_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("PurQty")
                        .HasColumnName("PUR_QTY")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("double precision");

                    b.Property<double?>("RecvQty")
                        .HasColumnName("RECV_QTY")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("TaxPerUnitAmt")
                        .HasColumnName("TAX_PER_UNIT_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WhetherTax")
                        .HasColumnName("WHETHER_TAX")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("GoodsMasterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SpecId");

                    b.HasIndex("UnitId");

                    b.ToTable("INV_GOODS_REC_DETL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsRecMast", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptDt")
                        .HasColumnName("ACCEPT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AcceptDtEng")
                        .HasColumnName("ACCEPT_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckDt")
                        .HasColumnName("CHECK_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CheckDtEng")
                        .HasColumnName("CHECK_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("DakhilaDt")
                        .HasColumnName("DAKHILA_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("DakhilaDtEng")
                        .HasColumnName("DAKHILA_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("DakhilaId")
                        .IsRequired()
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DetailsEng")
                        .HasColumnName("DETAILS_ENG")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("DetailsNep")
                        .HasColumnName("DETAILS_NEP")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InvBillNo")
                        .HasColumnName("INV_BILL_NO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InvDate")
                        .HasColumnName("INV_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("InvDateEng")
                        .HasColumnName("INV_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("PaymentId")
                        .HasColumnName("PAYMENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDt")
                        .HasColumnName("PREP_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PrepDtEng")
                        .HasColumnName("PREP_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("PurMasterId")
                        .HasColumnName("PUR_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("RepairId")
                        .HasColumnName("REPAIR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WarehouseId")
                        .HasColumnName("WAREHOUSE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptBy");

                    b.HasIndex("CheckBy");

                    b.HasIndex("PrepBy");

                    b.ToTable("INV_GOODS_REC_MAST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIncreaseDecrease", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NumId")
                        .HasColumnName("NUM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PurchaseDate")
                        .HasColumnName("PURCHASE_DATE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<double?>("ScapAmount")
                        .HasColumnName("SCAP_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("StockQty")
                        .HasColumnName("STOCK_QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_INCREASE_DECREASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIssueDakhila", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("IssuMasterId")
                        .HasColumnName("ISSU_MASTER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("IssueDetailId")
                        .HasColumnName("ISSUE_DETAIL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("IssueNo")
                        .HasColumnName("ISSUE_NO")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_ISSUE_DAKHILA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIssueDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnName("DELIVERY_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IssueDt")
                        .HasColumnName("ISSUE_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("IssueDtEng")
                        .HasColumnName("ISSUE_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("IssueMastId")
                        .HasColumnName("ISSUE_MAST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ItemIssueNo")
                        .HasColumnName("ITEM_ISSUE_NO")
                        .HasColumnType("double precision");

                    b.Property<double?>("ItemReqNo")
                        .HasColumnName("ITEM_REQ_NO")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ItemType")
                        .HasColumnName("ITEM_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemType");

                    b.HasIndex("SpecId");

                    b.ToTable("INV_ISSUE_DETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIssueMaster", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptDt")
                        .HasColumnName("ACCEPT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("BudgetYear")
                        .HasColumnName("BUDGET_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckDt")
                        .HasColumnName("CHECK_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("HoName")
                        .HasColumnName("HO_NAME")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("HoPost")
                        .HasColumnName("HO_POST")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("IssueBy")
                        .HasColumnName("ISSUE_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IssueByCat")
                        .HasColumnName("ISSUE_BY_CAT")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("IssueDt")
                        .HasColumnName("ISSUE_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("IssueNo")
                        .IsRequired()
                        .HasColumnName("ISSUE_NO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("IssueReceive")
                        .HasColumnName("ISSUE_RECEIVE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDt")
                        .HasColumnName("PREP_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ReceiveEmpId")
                        .HasColumnName("RECEIVE_EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("RequestId")
                        .HasColumnName("REQUEST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TransferDecisionDate")
                        .HasColumnName("TRANSFER_DECISION_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("TransferDecisionNo")
                        .HasColumnName("TRANSFER_DECISION_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Type")
                        .HasColumnName("TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptBy");

                    b.HasIndex("CheckBy");

                    b.HasIndex("IssueBy");

                    b.HasIndex("PrepBy");

                    b.HasIndex("RequestId");

                    b.ToTable("INV_ISSUE_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemAdjType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddSub")
                        .HasColumnName("ADD_SUB")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("AdjType")
                        .HasColumnName("ADJ_TYPE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("INV_ITEM_ADJ_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("DepreciationMax")
                        .HasColumnName("DEPRECIATION_MAX")
                        .HasColumnType("double precision");

                    b.Property<double?>("DepreciationMin")
                        .HasColumnName("DEPRECIATION_MIN")
                        .HasColumnType("double precision");

                    b.Property<double?>("DepreciationPer")
                        .HasColumnName("DEPRECIATION_PER")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("GrpLevel")
                        .HasColumnName("GRP_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("IsHeader")
                        .HasColumnName("IS_HEADER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Isexp")
                        .HasColumnName("ISEXP")
                        .HasColumnType("smallint");

                    b.Property<short?>("Islast")
                        .HasColumnName("ISLAST")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Maxl")
                        .HasColumnName("MAXL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Minl")
                        .HasColumnName("MINL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("ParentId")
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Rmaxl")
                        .HasColumnName("RMAXL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rminl")
                        .HasColumnName("RMINL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Unit")
                        .HasColumnName("UNIT")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_ITEM_CATEGORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemDetails", b =>
                {
                    b.Property<decimal>("ItemDtlId")
                        .HasColumnName("ITEM_DTL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptDt")
                        .HasColumnName("ACCEPT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("AdjType")
                        .HasColumnName("ADJ_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BudgetYear")
                        .HasColumnName("BUDGET_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ChasisNo")
                        .HasColumnName("CHASIS_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckDt")
                        .HasColumnName("CHECK_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DakhilaId")
                        .HasColumnName("DAKHILA_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngineNo")
                        .HasColumnName("ENGINE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("EntryDt")
                        .HasColumnName("ENTRY_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("GdAdjId")
                        .HasColumnName("GD_ADJ_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IssueDt")
                        .HasColumnName("ISSUE_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("IssueId")
                        .HasColumnName("ISSUE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ItemRate")
                        .HasColumnName("ITEM_RATE")
                        .HasColumnType("double precision");

                    b.Property<string>("ItemStatus")
                        .HasColumnName("ITEM_STATUS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LilamDt")
                        .HasColumnName("LILAM_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LilamId")
                        .HasColumnName("LILAM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ModelNo")
                        .HasColumnName("MODEL_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDt")
                        .HasColumnName("PREP_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("double precision");

                    b.Property<string>("RegNo")
                        .HasColumnName("REG_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<double?>("RelQty")
                        .HasColumnName("REL_QTY")
                        .HasColumnType("double precision");

                    b.Property<string>("RelUnit")
                        .HasColumnName("REL_UNIT")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("StokRtDt")
                        .HasColumnName("STOK_RT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("StokRtId")
                        .HasColumnName("STOK_RT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Unit")
                        .HasColumnName("UNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WeightVeh")
                        .HasColumnName("WEIGHT_VEH")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("ItemDtlId")
                        .HasName("INV_ITEM_DETAILS_pkey");

                    b.HasIndex("AcceptBy");

                    b.HasIndex("BrandId");

                    b.HasIndex("CheckBy");

                    b.HasIndex("DakhilaId");

                    b.HasIndex("GdAdjId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrepBy");

                    b.HasIndex("SpecId");

                    b.ToTable("INV_ITEM_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemMst", b =>
                {
                    b.Property<decimal>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaInsqFeets")
                        .HasColumnName("AREA_INSQ_FEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetAccId")
                        .HasColumnName("BUDGET_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Companyname")
                        .HasColumnName("COMPANYNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Constructontype")
                        .HasColumnName("CONSTRUCTONTYPE")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("Countryid")
                        .HasColumnName("COUNTRYID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Depmaxrate")
                        .HasColumnName("DEPMAXRATE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Depreciation")
                        .HasColumnName("DEPRECIATION")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Gussage")
                        .HasColumnName("GUSSAGE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemMainClass")
                        .HasColumnName("ITEM_MAIN_CLASS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemNature")
                        .HasColumnName("ITEM_NATURE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemType")
                        .HasColumnName("ITEM_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("KittaNo")
                        .HasColumnName("KITTA_NO")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("LandAreaInsqFeets")
                        .HasColumnName("LAND_AREA_INSQ_FEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("LandLocation")
                        .HasColumnName("LAND_LOCATION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("LandMarketRate")
                        .HasColumnName("LAND_MARKET_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LandUnitRate")
                        .HasColumnName("LAND_UNIT_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Maxl")
                        .HasColumnName("MAXL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Minl")
                        .HasColumnName("MINL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Minrate")
                        .HasColumnName("MINRATE")
                        .HasColumnType("double precision");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Propertytype")
                        .HasColumnName("PROPERTYTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Rmaxl")
                        .HasColumnName("RMAXL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rminl")
                        .HasColumnName("RMINL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Sizes")
                        .HasColumnName("SIZES")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Source")
                        .HasColumnName("SOURCE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VehiclePartsId")
                        .HasColumnName("VEHICLE_PARTS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("ItemId")
                        .HasName("INV_ITEM_MST_pkey");

                    b.HasIndex("UnitId");

                    b.ToTable("INV_ITEM_MST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemSpec", b =>
                {
                    b.Property<decimal>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("SpecId")
                        .HasName("INV_ITEM_SPEC_pkey");

                    b.ToTable("INV_ITEM_SPEC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemStatuscheck", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptedBy")
                        .HasColumnName("ACCEPTED_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptedDate")
                        .HasColumnName("ACCEPTED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AcceptedDateEng")
                        .HasColumnName("ACCEPTED_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CheckQty")
                        .HasColumnName("CHECK_QTY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckStatus")
                        .HasColumnName("CHECK_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("CheckedDate")
                        .HasColumnName("CHECKED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CheckedDateEng")
                        .HasColumnName("CHECKED_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("CountUpDown")
                        .HasColumnName("COUNT_UP_DOWN")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("CountYesNo")
                        .HasColumnName("COUNT_YES_NO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("FisicalYear")
                        .HasColumnName("FISICAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InspEdDate")
                        .HasColumnName("INSP_ED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("InspEdDateEng")
                        .HasColumnName("INSP_ED_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("InspStDate")
                        .HasColumnName("INSP_ST_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("InspStDateEng")
                        .HasColumnName("INSP_ST_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("InspectDate")
                        .HasColumnName("INSPECT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("InspectDateEng")
                        .HasColumnName("INSPECT_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDate")
                        .HasColumnName("PREP_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PrepDateEng")
                        .HasColumnName("PREP_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("StkCurCount")
                        .HasColumnName("STK_CUR_COUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("StkMstCount")
                        .HasColumnName("STK_MST_COUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TallyBy")
                        .HasColumnName("TALLY_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("UpDownDetail")
                        .HasColumnName("UP_DOWN_DETAIL")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("UpDownNo")
                        .HasColumnName("UP_DOWN_NO")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("BrandId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrepBy");

                    b.HasIndex("SpecId");

                    b.HasIndex("TallyBy");

                    b.ToTable("INV_ITEM_STATUSCHECK");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamAppmaster", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Applydate")
                        .HasColumnName("APPLYDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Applyengdate")
                        .HasColumnName("APPLYENGDATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("Applylilamid")
                        .HasColumnName("APPLYLILAMID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Appno")
                        .HasColumnName("APPNO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Orgapplicantname")
                        .HasColumnName("ORGAPPLICANTNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Orgapplicantpost")
                        .HasColumnName("ORGAPPLICANTPOST")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Projid")
                        .HasColumnName("PROJID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("INV_LILAM_APPMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Dakhilaid")
                        .HasColumnName("DAKHILAID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DeliveryStatus")
                        .HasColumnName("DELIVERY_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("DepAmt")
                        .HasColumnName("DEP_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("IssueDt")
                        .HasColumnName("ISSUE_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("IssueDtEng")
                        .HasColumnName("ISSUE_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ItemIssueNo")
                        .HasColumnName("ITEM_ISSUE_NO")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ItemType")
                        .HasColumnName("ITEM_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LilamId")
                        .HasColumnName("LILAM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Minimumrate")
                        .HasColumnName("MINIMUMRATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Nikashaid")
                        .HasColumnName("NIKASHAID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("TotalInStock")
                        .HasColumnName("TOTAL_IN_STOCK")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_LILAM_DETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamMast", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptDt")
                        .HasColumnName("ACCEPT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AcceptDtEng")
                        .HasColumnName("ACCEPT_DT_ENG")
                        .HasColumnType("date");

                    b.Property<double?>("AcceptPercent")
                        .HasColumnName("ACCEPT_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckDt")
                        .HasColumnName("CHECK_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CheckDtEng")
                        .HasColumnName("CHECK_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FiscalyearChukta")
                        .HasColumnName("FISCALYEAR_CHUKTA")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("IssueBy")
                        .HasColumnName("ISSUE_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IssueDt")
                        .HasColumnName("ISSUE_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("IssueDtEng")
                        .HasColumnName("ISSUE_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("LilamNo")
                        .IsRequired()
                        .HasColumnName("LILAM_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Lilamtype")
                        .HasColumnName("LILAMTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NewspaperName")
                        .HasColumnName("NEWSPAPER_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Pageno")
                        .HasColumnName("PAGENO")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("PernewsRate")
                        .HasColumnName("PERNEWS_RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDt")
                        .HasColumnName("PREP_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PrepDtEng")
                        .HasColumnName("PREP_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("PublishDate")
                        .HasColumnName("PUBLISH_DATE")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("ReceiveBy")
                        .HasColumnName("RECEIVE_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReceivePersonName")
                        .HasColumnName("RECEIVE_PERSON_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RecivePersonPost")
                        .HasColumnName("RECIVE_PERSON_POST")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Registerno")
                        .HasColumnName("REGISTERNO")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<decimal?>("ValidDays")
                        .HasColumnName("VALID_DAYS")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_LILAM_MAST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamRecList", b =>
                {
                    b.Property<decimal?>("Applicantid")
                        .HasColumnName("APPLICANTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RecDateNp")
                        .HasColumnName("REC_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("INV_LILAM_REC_LIST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamappdetails", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Brandid")
                        .HasColumnName("BRANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Dakhilaid")
                        .HasColumnName("DAKHILAID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Itemid")
                        .HasColumnName("ITEMID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Lilamappliid")
                        .HasColumnName("LILAMAPPLIID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Lilamqty")
                        .HasColumnName("LILAMQTY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Lilamtotalamt")
                        .HasColumnName("LILAMTOTALAMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Nikashaid")
                        .HasColumnName("NIKASHAID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Specid")
                        .HasColumnName("SPECID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Unitid")
                        .HasColumnName("UNITID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Lilamappliid");

                    b.ToTable("INV_LILAMAPPDETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvOrgType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("INV_ORG_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvProject", b =>
                {
                    b.Property<decimal>("ProjectId")
                        .HasColumnName("PROJECT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProjectId")
                        .HasName("INV_PROJECT_pkey");

                    b.ToTable("INV_PROJECT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurMastPlan", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AgreementType")
                        .HasColumnName("AGREEMENT_TYPE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("ApproxAmt")
                        .HasColumnName("APPROX_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Budget1year")
                        .HasColumnName("BUDGET1YEAR")
                        .HasColumnType("double precision");

                    b.Property<double?>("Budget2year")
                        .HasColumnName("BUDGET2YEAR")
                        .HasColumnType("double precision");

                    b.Property<double?>("Budget3year")
                        .HasColumnName("BUDGET3YEAR")
                        .HasColumnType("double precision");

                    b.Property<string>("BudgetResource")
                        .HasColumnName("BUDGET_RESOURCE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("BudgetYear")
                        .HasColumnName("BUDGET_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("PkgNo")
                        .HasColumnName("PKG_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PurType")
                        .HasColumnName("PUR_TYPE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkEndDate")
                        .HasColumnName("WORK_END_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("WorkEndDateAd")
                        .HasColumnName("WORK_END_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("WorkStDate")
                        .HasColumnName("WORK_ST_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("WorkStDateAd")
                        .HasColumnName("WORK_ST_DATE_AD")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("INV_PUR_MAST_PLAN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurOrderDetl", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isdakhila")
                        .HasColumnName("ISDAKHILA")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ItemRate")
                        .HasColumnName("ITEM_RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("ItemType")
                        .HasColumnName("ITEM_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PurMstId")
                        .HasColumnName("PUR_MST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("TaxAmt")
                        .HasColumnName("TAX_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalAmt")
                        .HasColumnName("TOTAL_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemType");

                    b.HasIndex("PurMstId");

                    b.HasIndex("SpecId");

                    b.HasIndex("UnitId");

                    b.ToTable("INV_PUR_ORDER_DETL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurOrderMast", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptedBy")
                        .HasColumnName("ACCEPTED_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptedDt")
                        .HasColumnName("ACCEPTED_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AcceptedDtEng")
                        .HasColumnName("ACCEPTED_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("Accountid")
                        .HasColumnName("ACCOUNTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BudgetYear")
                        .HasColumnName("BUDGET_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("CheckedBy")
                        .HasColumnName("CHECKED_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckedDt")
                        .HasColumnName("CHECKED_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CheckedDtEng")
                        .HasColumnName("CHECKED_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("CustomOrderNo")
                        .HasColumnName("CUSTOM_ORDER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DakhilaLastEntryDt")
                        .HasColumnName("DAKHILA_LAST_ENTRY_DT")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Isdakhila")
                        .HasColumnName("ISDAKHILA")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("LetterOrderNo")
                        .HasColumnName("LETTER_ORDER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PreparedBy")
                        .HasColumnName("PREPARED_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PreparedDt")
                        .HasColumnName("PREPARED_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PreparedDtEng")
                        .HasColumnName("PREPARED_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("PurOrderDt")
                        .HasColumnName("PUR_ORDER_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PurOrderDtEng")
                        .HasColumnName("PUR_ORDER_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("PurOrderNo")
                        .HasColumnName("PUR_ORDER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PurOrderType")
                        .HasColumnName("PUR_ORDER_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PurType")
                        .HasColumnName("PUR_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PurchaseDecisionDate")
                        .HasColumnName("PURCHASE_DECISION_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("PurchaseDecisionNo")
                        .HasColumnName("PURCHASE_DECISION_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RepairOrderNo")
                        .HasColumnName("REPAIR_ORDER_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("ReqId")
                        .HasColumnName("REQ_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReturnItemDt")
                        .HasColumnName("RETURN_ITEM_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("ReturnItemDtEng")
                        .HasColumnName("RETURN_ITEM_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("SuppId")
                        .HasColumnName("SUPP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedBy");

                    b.HasIndex("CheckedBy");

                    b.HasIndex("PreparedBy");

                    b.HasIndex("SuppId");

                    b.ToTable("INV_PUR_ORDER_MAST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurType", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isdefault")
                        .HasColumnName("ISDEFAULT")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NepEng")
                        .HasColumnName("NEP_ENG")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("INV_PUR_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvReqDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ReqMastId")
                        .HasColumnName("REQ_MAST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReqMastId");

                    b.HasIndex("SpecId");

                    b.ToTable("INV_REQ_DETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvRequisitionMast", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AcceptBy")
                        .HasColumnName("ACCEPT_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AcceptDt")
                        .HasColumnName("ACCEPT_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AcceptDtEng")
                        .HasColumnName("ACCEPT_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("CheckBy")
                        .HasColumnName("CHECK_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CheckDt")
                        .HasColumnName("CHECK_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("CheckDtEng")
                        .HasColumnName("CHECK_DT_ENG")
                        .HasColumnType("date");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("HandoverId")
                        .HasColumnName("HANDOVER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("HandoverRoomId")
                        .HasColumnName("HANDOVER_ROOM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("MaintainItemId")
                        .HasColumnName("MAINTAIN_ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Orgstaffname")
                        .HasColumnName("ORGSTAFFNAME")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Orgstaffpost")
                        .HasColumnName("ORGSTAFFPOST")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PrepBy")
                        .HasColumnName("PREP_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PrepDt")
                        .HasColumnName("PREP_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("PrepDtEng")
                        .HasColumnName("PREP_DT_ENG")
                        .HasColumnType("date");

                    b.Property<decimal?>("ProjId")
                        .HasColumnName("PROJ_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PurchaseGive")
                        .HasColumnName("PURCHASE_GIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Reasion")
                        .HasColumnName("REASION")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ReqBy")
                        .HasColumnName("REQ_BY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("ReqDateEng")
                        .HasColumnName("REQ_DATE_ENG")
                        .HasColumnType("date");

                    b.Property<string>("ReqDateNep")
                        .HasColumnName("REQ_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ReqId")
                        .HasColumnName("REQ_ID")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ReqType")
                        .HasColumnName("REQ_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("StockGive")
                        .HasColumnName("STOCK_GIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TypeId")
                        .HasColumnName("TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VehicleId")
                        .HasColumnName("VEHICLE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptBy");

                    b.HasIndex("CheckBy");

                    b.HasIndex("ItemId");

                    b.HasIndex("PrepBy");

                    b.HasIndex("ProjId");

                    b.HasIndex("ReqBy");

                    b.ToTable("INV_REQUISITION_MAST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvRoomMst", b =>
                {
                    b.Property<decimal>("RoomId")
                        .HasColumnName("ROOM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("BlockNo")
                        .HasColumnName("BLOCK_NO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DeptId")
                        .HasColumnName("DEPT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DescEn")
                        .HasColumnName("DESC_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DescNp")
                        .HasColumnName("DESC_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("FloorNo")
                        .HasColumnName("FLOOR_NO")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("RoomId")
                        .HasName("INV_ROOM_MST_pkey");

                    b.HasIndex("DeptId");

                    b.ToTable("INV_ROOM_MST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvStatusDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Acceptby")
                        .HasColumnName("ACCEPTBY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Acceptvsdate")
                        .HasColumnName("ACCEPTVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Checkedby")
                        .HasColumnName("CHECKEDBY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Checkvsdate")
                        .HasColumnName("CHECKVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemStatusId")
                        .HasColumnName("ITEM_STATUS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("MainId")
                        .HasColumnName("MAIN_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Preby")
                        .HasColumnName("PREBY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Prevsdate")
                        .HasColumnName("PREVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Statusdatead")
                        .HasColumnName("STATUSDATEAD")
                        .HasColumnType("date");

                    b.Property<string>("Statusdatevs")
                        .HasColumnName("STATUSDATEVS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Totalqty")
                        .HasColumnName("TOTALQTY")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Acceptby");

                    b.HasIndex("Checkedby");

                    b.HasIndex("Preby");

                    b.ToTable("INV_STATUS_DETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvSupItmDet", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SupId")
                        .HasColumnName("SUP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_SUP_ITM_DET");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvSupplier", b =>
                {
                    b.Property<decimal>("SupId")
                        .HasColumnName("SUP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyNameEn")
                        .HasColumnName("COMPANY_NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CompanyNameNp")
                        .HasColumnName("COMPANY_NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime?>("DateAd")
                        .HasColumnName("DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("DateVs")
                        .HasColumnName("DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("IsSelected")
                        .HasColumnName("IS_SELECTED")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OrgType")
                        .HasColumnName("ORG_TYPE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PHONE_NO")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("RegNo")
                        .HasColumnName("REG_NO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("RegiType")
                        .HasColumnName("REGI_TYPE")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("SupType")
                        .HasColumnName("SUP_TYPE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("TpinPanNo")
                        .HasColumnName("TPIN_PAN_NO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("SupId")
                        .HasName("INV_SUPPLIER_pkey");

                    b.ToTable("INV_SUPPLIER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvSupplierFiscalyear", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<decimal?>("SupId")
                        .HasColumnName("SUP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_SUPPLIER_FISCALYEAR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvTaxRate", b =>
                {
                    b.Property<decimal>("TaxRateId")
                        .HasColumnName("TAX_RATE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double>("TaxRate")
                        .HasColumnName("TAX_RATE")
                        .HasColumnType("double precision");

                    b.HasKey("TaxRateId")
                        .HasName("INV_TAX_RATE_pkey");

                    b.ToTable("INV_TAX_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvTypeSetup", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DescEn")
                        .HasColumnName("DESC_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DescNp")
                        .IsRequired()
                        .HasColumnName("DESC_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("TypeId")
                        .HasColumnName("TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("INV_TYPE_SETUP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvUnit", b =>
                {
                    b.Property<decimal>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DescEn")
                        .HasColumnName("DESC_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DescNp")
                        .IsRequired()
                        .HasColumnName("DESC_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("MulFactor")
                        .HasColumnName("MUL_FACTOR")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NoOfUnits")
                        .HasColumnName("NO_OF_UNITS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RelatedTo")
                        .HasColumnName("RELATED_TO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("UnitId")
                        .HasName("INV_UNIT_pkey");

                    b.ToTable("INV_UNIT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvWarehouse", b =>
                {
                    b.Property<decimal>("WarehouseId")
                        .HasColumnName("WAREHOUSE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsActive")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("WarehouseId")
                        .HasName("INV_WAREHOUSE_pkey");

                    b.ToTable("INV_WAREHOUSE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvYrlyPurPlan", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("AgreementDtAd")
                        .HasColumnName("AGREEMENT_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("AgreementType")
                        .HasColumnName("AGREEMENT_TYPE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("AnlysisDsgnDtAd")
                        .HasColumnName("ANLYSIS_DSGN_DT_AD")
                        .HasColumnType("date");

                    b.Property<double?>("ApproxAmt")
                        .HasColumnName("APPROX_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("AprxAmtAcptDate")
                        .HasColumnName("APRX_AMT_ACPT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AprxAmtAcptDtAd")
                        .HasColumnName("APRX_AMT_ACPT_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("FormEntryDate")
                        .HasColumnName("FORM_ENTRY_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("InfoPublishDate")
                        .HasColumnName("INFO_PUBLISH_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("PurType")
                        .HasColumnName("PUR_TYPE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TendrAcceptDate")
                        .HasColumnName("TENDR_ACCEPT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("TendrAcceptDtAd")
                        .HasColumnName("TENDR_ACCEPT_DT_AD")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TendrCallDtAd")
                        .HasColumnName("TENDR_CALL_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("TendrOpenDate")
                        .HasColumnName("TENDR_OPEN_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("TendrOpenDtAd")
                        .HasColumnName("TENDR_OPEN_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("TendrSaleDate")
                        .HasColumnName("TENDR_SALE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Wrk2FinDtAd")
                        .HasColumnName("WRK_2_FIN_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("WrkAcmplshDate")
                        .HasColumnName("WRK_ACMPLSH_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("WrkAcmplshDtAd")
                        .HasColumnName("WRK_ACMPLSH_DT_AD")
                        .HasColumnType("date");

                    b.Property<string>("WrkOrderDate")
                        .HasColumnName("WRK_ORDER_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("INV_YRLY_PUR_PLAN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.IpttaxsummaryHistory", b =>
                {
                    b.Property<DateTime?>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("Additionalcharges")
                        .HasColumnName("ADDITIONALCHARGES")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ComputerName")
                        .HasColumnName("COMPUTER_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DataStatus")
                        .HasColumnName("DATA_STATUS")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Datepaid")
                        .HasColumnName("DATEPAID")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Isthisfromrevenueaccount")
                        .HasColumnName("ISTHISFROMREVENUEACCOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("LastTaxPaidAmount")
                        .HasColumnName("LAST_TAX_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RemHlFineAmount")
                        .HasColumnName("REM_HL_FINE_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("RemHlFineStatus")
                        .HasColumnName("REM_HL_FINE_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("RemHlPaidAmount")
                        .HasColumnName("REM_HL_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemIptFineAmount")
                        .HasColumnName("REM_IPT_FINE_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("RemIptFineStatus")
                        .HasColumnName("REM_IPT_FINE_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("RemIptPaidAmount")
                        .HasColumnName("REM_IPT_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("text");

                    b.Property<string>("TaxType")
                        .HasColumnName("TAX_TYPE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Taxpaidamount")
                        .HasColumnName("TAXPAIDAMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("TranTime")
                        .HasColumnName("TRAN_TIME")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WindowsUser")
                        .HasColumnName("WINDOWS_USER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("IPTTAXSUMMARY_HISTORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Issuedbills", b =>
                {
                    b.Property<string>("Billnofrom")
                        .HasColumnName("BILLNOFROM")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Billnoto")
                        .HasColumnName("BILLNOTO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Dateissued")
                        .HasColumnName("DATEISSUED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Thelino")
                        .HasColumnName("THELINO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("ISSUEDBILLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Landmeasuringunits", b =>
                {
                    b.Property<decimal?>("Sqftperunit")
                        .HasColumnName("SQFTPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Unitid")
                        .HasColumnName("UNITID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Unitname")
                        .HasColumnName("UNITNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("LANDMEASURINGUNITS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Landsmultievaluationdetail", b =>
                {
                    b.Property<decimal?>("Areainsqft")
                        .HasColumnName("AREAINSQFT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("LANDSMULTIEVALUATIONDETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Leledger20682069", b =>
                {
                    b.Property<decimal?>("Appliedvalue")
                        .HasColumnName("APPLIEDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Calculatedvalue")
                        .HasColumnName("CALCULATEDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landmeasuringunit")
                        .HasColumnName("LANDMEASURINGUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Netcalculatedvalue")
                        .HasColumnName("NETCALCULATEDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Netevaluatingarea")
                        .HasColumnName("NETEVALUATINGAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Noncompletionreasonid")
                        .HasColumnName("NONCOMPLETIONREASONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Noncompletionreasons")
                        .HasColumnName("NONCOMPLETIONREASONS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Nonevaluatedarea")
                        .HasColumnName("NONEVALUATEDAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Otherminusinevaluations")
                        .HasColumnName("OTHERMINUSINEVALUATIONS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Otherplusinevaluations")
                        .HasColumnName("OTHERPLUSINEVALUATIONS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Otherplusminusdescriptions")
                        .HasColumnName("OTHERPLUSMINUSDESCRIPTIONS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Selfdeclaredvalue")
                        .HasColumnName("SELFDECLAREDVALUE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Taxed")
                        .HasColumnName("TAXED")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Totalarea")
                        .HasColumnName("TOTALAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Trackid")
                        .HasColumnName("TRACKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("LELEDGER20682069");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MalpotLands", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("AddUserid")
                        .HasColumnName("ADD_USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Areainsqft")
                        .HasColumnName("AREAINSQFT")
                        .HasColumnType("double precision");

                    b.Property<string>("EditDate")
                        .HasColumnName("EDIT_DATE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("EditUserid")
                        .HasColumnName("EDIT_USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Eid")
                        .HasColumnName("EID")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("IsIpt")
                        .HasColumnName("IS_IPT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Mothnumber")
                        .HasColumnName("MOTHNUMBER")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("Nonfunctionalareainsqft")
                        .HasColumnName("NONFUNCTIONALAREAINSQFT")
                        .HasColumnType("double precision");

                    b.Property<string>("NpFirstname")
                        .HasColumnName("NP_FIRSTNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NpLastname")
                        .HasColumnName("NP_LASTNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Oldvdcid")
                        .HasColumnName("OLDVDCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Oldwordno")
                        .HasColumnName("OLDWORDNO")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Vdcid")
                        .HasColumnName("VDCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Wordno")
                        .HasColumnName("WORDNO")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("MALPOT_LANDS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapAreaGndCov", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("integer");

                    b.Property<long?>("Area")
                        .HasColumnName("AREA")
                        .HasColumnType("bigint");

                    b.Property<double?>("GroundCov")
                        .HasColumnName("GROUND_COV")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Regionid")
                        .HasColumnName("REGIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Regionid");

                    b.ToTable("MAP_AREA_GND_COV");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapConstrctionKind", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_CONSTRCTION_KIND_NAME_NP_key");

                    b.ToTable("MAP_CONSTRCTION_KIND");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapDesignerDtl", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Class")
                        .HasColumnName("CLASS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("DesignerName")
                        .HasColumnName("DESIGNER_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("EngcouncilregNo")
                        .HasColumnName("ENGCOUNCILREG_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FirmName")
                        .HasColumnName("FIRM_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("PhoneNo")
                        .HasColumnName("PHONE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("RegNo")
                        .IsRequired()
                        .HasColumnName("REG_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("StatusId")
                        .HasColumnName("STATUS_ID")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.HasIndex("RegNo")
                        .IsUnique()
                        .HasName("MAP_DESIGNER_DTL_REG_NO_key");

                    b.ToTable("MAP_DESIGNER_DTL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapDirection", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_DIRECTION_NAME_NP_key");

                    b.ToTable("MAP_DIRECTION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapDrainType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_DRAIN_TYPE_NAME_NP_key");

                    b.ToTable("MAP_DRAIN_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapFloor", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_FLOOR_NAME_NP_key");

                    b.ToTable("MAP_FLOOR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapHouseuseType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_HOUSEUSE_TYPE_NAME_NP_key");

                    b.ToTable("MAP_HOUSEUSE_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapHtstandard", b =>
                {
                    b.Property<short>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Distanceft")
                        .HasColumnName("DISTANCEFT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<int?>("Kv")
                        .HasColumnName("KV")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Sn")
                        .HasName("MAP_HTSTANDARD_pkey");

                    b.ToTable("MAP_HTSTANDARD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapIncomeType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_INCOME_TYPE_NAME_NP_key");

                    b.ToTable("MAP_INCOME_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapLandOwnerType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_LAND_OWNER_TYPE_NAME_NP_key");

                    b.ToTable("MAP_LAND_OWNER_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapNeighbourType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_NEIGHBOUR_TYPE_NAME_NP_key");

                    b.ToTable("MAP_NEIGHBOUR_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapRate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("DepositeRatePermit")
                        .HasColumnName("DEPOSITE_RATE_PERMIT")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("EntryDate")
                        .HasColumnName("ENTRY_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("RatePermit")
                        .HasColumnName("RATE_PERMIT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("MAP_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapRegionFar", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("AreaFrom")
                        .HasColumnName("AREA_FROM")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaTo")
                        .HasColumnName("AREA_TO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Far")
                        .HasColumnName("FAR")
                        .HasColumnType("double precision");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Regionid")
                        .HasColumnName("REGIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Regionid");

                    b.ToTable("MAP_REGION_FAR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapRoofCnstrctType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_ROOF_CNSTRCT_TYPE_NAME_NP_key");

                    b.ToTable("MAP_ROOF_CNSTRCT_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapRoofType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_ROOF_TYPE_NAME_NP_key");

                    b.ToTable("MAP_ROOF_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapSite", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Area")
                        .HasColumnName("AREA")
                        .HasColumnType("double precision");

                    b.Property<short?>("Landshape")
                        .HasColumnName("LANDSHAPE")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Permitid")
                        .HasColumnName("PERMITID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("SideA")
                        .HasColumnName("SIDE_A")
                        .HasColumnType("double precision");

                    b.Property<double?>("SideB")
                        .HasColumnName("SIDE_B")
                        .HasColumnType("double precision");

                    b.Property<double?>("SideC")
                        .HasColumnName("SIDE_C")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("MAP_SITE_pkey");

                    b.ToTable("MAP_SITE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapStdheightRw", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("smallint");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("HouseHeight")
                        .HasColumnName("HOUSE_HEIGHT")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<double?>("RoadWidth")
                        .HasColumnName("ROAD_WIDTH")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("MAP_STDHEIGHT_RW");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapStoreys", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_STOREYS_NAME_NP_key");

                    b.ToTable("MAP_STOREYS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapStructureType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_STRUCTURE_TYPE_NAME_NP_key");

                    b.ToTable("MAP_STRUCTURE_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapZone", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.HasIndex("NameNp")
                        .IsUnique()
                        .HasName("MAP_ZONE_NAME_NP_key");

                    b.ToTable("MAP_ZONE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Ministry", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("District")
                        .HasColumnName("DISTRICT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Phone")
                        .HasColumnName("PHONE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Vdc")
                        .HasColumnName("VDC")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Zone")
                        .HasColumnName("ZONE")
                        .HasColumnType("numeric(22,0)");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasName("MINISTRY_CODE_key");

                    b.ToTable("MINISTRY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MinistryAccHead", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SubHeadId")
                        .HasColumnName("SUB_HEAD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("MINISTRY_ACC_HEAD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Nationalities", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Nationalityid")
                        .HasColumnName("NATIONALITYID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("NATIONALITIES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.NewPropertyTaxtable", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Frompropertyvalue")
                        .HasColumnName("FROMPROPERTYVALUE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Fromtaxamount")
                        .HasColumnName("FROMTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Ratesn")
                        .HasColumnName("RATESN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(190)")
                        .HasMaxLength(190);

                    b.Property<double?>("TaxPercent")
                        .HasColumnName("TAX_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Topropertyvalue")
                        .HasColumnName("TOPROPERTYVALUE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Totaxamount")
                        .HasColumnName("TOTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("NEW_PROPERTY_TAXTABLE_pkey");

                    b.ToTable("NEW_PROPERTY_TAXTABLE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.OfficeType", b =>
                {
                    b.Property<decimal>("OfficeTypeId")
                        .HasColumnName("OFFICE_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OfficeType1")
                        .IsRequired()
                        .HasColumnName("OFFICE_TYPE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("OfficeTypeId");

                    b.ToTable("OFFICE_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.OrgBankAccount", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccName")
                        .HasColumnName("ACC_NAME")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("AccNo")
                        .HasColumnName("ACC_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("BankAccntTypeId")
                        .HasColumnName("BANK_ACCNT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Bankid")
                        .HasColumnName("BANKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BranchId")
                        .HasColumnName("BRANCH_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccntTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrgId");

                    b.ToTable("ORG_BANK_ACCOUNT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.OrganizationTree", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ContainsDarbandi")
                        .HasColumnName("CONTAINS_DARBANDI")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("GeoRegion")
                        .HasColumnName("GEO_REGION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<int?>("GrpLevel")
                        .HasColumnName("GRP_LEVEL")
                        .HasColumnType("integer");

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("ParentId")
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("GeoRegion");

                    b.HasIndex("ParentId");

                    b.ToTable("ORGANIZATION_TREE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PaymentSlipMaster", b =>
                {
                    b.Property<decimal>("PaymentSlipId")
                        .HasColumnName("PAYMENT_SLIP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AdvClearedFromBank")
                        .HasColumnName("ADV_CLEARED_FROM_BANK")
                        .HasColumnType("double precision");

                    b.Property<double?>("AdvClearedFromBill")
                        .HasColumnName("ADV_CLEARED_FROM_BILL")
                        .HasColumnType("double precision");

                    b.Property<double?>("AdvClearedFromCash")
                        .HasColumnName("ADV_CLEARED_FROM_CASH")
                        .HasColumnType("double precision");

                    b.Property<double?>("BillAmt")
                        .HasColumnName("BILL_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("CashPayment")
                        .HasColumnName("CASH_PAYMENT")
                        .HasColumnType("double precision");

                    b.Property<double?>("ChequePayment")
                        .HasColumnName("CHEQUE_PAYMENT")
                        .HasColumnType("double precision");

                    b.Property<double?>("ContractTaxDeduction")
                        .HasColumnName("CONTRACT_TAX_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<double?>("IncomeTaxDeduction")
                        .HasColumnName("INCOME_TAX_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("IsPeski")
                        .HasColumnName("IS_PESKI")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("LastYearsAdvDeduction")
                        .HasColumnName("LAST_YEARS_ADV_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromBank")
                        .HasColumnName("LY_ADV_CLEARED_FROM_BANK")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromBill")
                        .HasColumnName("LY_ADV_CLEARED_FROM_BILL")
                        .HasColumnType("double precision");

                    b.Property<double?>("LyAdvClearedFromCash")
                        .HasColumnName("LY_ADV_CLEARED_FROM_CASH")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherDeduction")
                        .HasColumnName("OTHER_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentDescription")
                        .HasColumnName("PAYMENT_DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RetentionMoneyEduction")
                        .HasColumnName("RETENTION_MONEY_EDUCTION")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TransactionTypeid")
                        .HasColumnName("TRANSACTION_TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("VatAmt")
                        .HasColumnName("VAT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("VatDeduction")
                        .HasColumnName("VAT_DEDUCTION")
                        .HasColumnType("double precision");

                    b.Property<string>("VrDate")
                        .HasColumnName("VR_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VrNo")
                        .HasColumnName("VR_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PaymentSlipId")
                        .HasName("PAYMENT_SLIP_MASTER_pkey");

                    b.ToTable("PAYMENT_SLIP_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PersonTypeMaster", b =>
                {
                    b.Property<decimal>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Isfixed")
                        .HasColumnName("ISFIXED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("text");

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("text");

                    b.HasKey("PersonTypeId")
                        .HasName("PERSON_TYPE_MASTER_pkey");

                    b.ToTable("PERSON_TYPE_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisAppointmentType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PIS_APPOINTMENT_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisAttributes", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("NameNep")
                        .HasColumnName("NAME_NEP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("PIS_ATTRIBUTES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisAwards", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("LevelDesc")
                        .HasColumnName("LEVEL_DESC")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime?>("RcvdDateAd")
                        .HasColumnName("RCVD_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("RvcdDateVs")
                        .HasColumnName("RVCD_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_AWARDS_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_AWARDS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisBankPayroll", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccountNo")
                        .HasColumnName("ACCOUNT_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("BankFolio")
                        .HasColumnName("BANK_FOLIO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("BankId")
                        .HasColumnName("BANK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_BANK_PAYROLL_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex("EmpId");

                    b.ToTable("PIS_BANK_PAYROLL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisDarbandi", b =>
                {
                    b.Property<decimal>("DarbandiId")
                        .HasColumnName("DARBANDI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NoOfPost")
                        .HasColumnName("NO_OF_POST")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OfficeId")
                        .HasColumnName("OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PostLevel")
                        .HasColumnName("POST_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SewaSamuhaUpasamuha")
                        .HasColumnName("SEWA_SAMUHA_UPASAMUHA")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("DarbandiId")
                        .HasName("PIS_DARBANDI_pkey");

                    b.HasIndex("LocalPostId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PostId");

                    b.ToTable("PIS_DARBANDI");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisDeletdFrmFulfildDarb", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("FrmAppointmntType")
                        .HasColumnName("FRM_APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("FrmDarbandiId")
                        .HasColumnName("FRM_DARBANDI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FrmDateFulfilled")
                        .HasColumnName("FRM_DATE_FULFILLED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FrmOfficeId")
                        .HasColumnName("FRM_OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("FrmSnInFd")
                        .HasColumnName("FRM_SN_IN_FD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ToSnInFd")
                        .HasColumnName("TO_SN_IN_FD")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_DELETD_FRM_FULFILD_DARB_pkey");

                    b.HasIndex("FrmDarbandiId");

                    b.HasIndex("FrmOfficeId");

                    b.HasIndex("FrmSnInFd");

                    b.HasIndex("ToSnInFd");

                    b.ToTable("PIS_DELETD_FRM_FULFILD_DARB");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEduBoard", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CountryId")
                        .HasColumnName("COUNTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEng")
                        .HasColumnName("NAME_ENG")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameNep")
                        .HasColumnName("NAME_NEP")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Place")
                        .HasColumnName("PLACE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Id");

                    b.ToTable("PIS_EDU_BOARD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEduLevel", b =>
                {
                    b.Property<decimal>("EduId")
                        .HasColumnName("EDU_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EduName")
                        .HasColumnName("EDU_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("EduId")
                        .HasName("PIS_EDU_LEVEL_pkey");

                    b.ToTable("PIS_EDU_LEVEL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEducation", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("BoardId")
                        .HasColumnName("BOARD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("CompletionYrAd")
                        .HasColumnName("COMPLETION_YR_AD")
                        .HasColumnType("date");

                    b.Property<string>("CompletionYrVs")
                        .HasColumnName("COMPLETION_YR_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Division")
                        .HasColumnName("DIVISION")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("EduLevelId")
                        .HasColumnName("EDU_LEVEL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EduName")
                        .HasColumnName("EDU_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Institute")
                        .HasColumnName("INSTITUTE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<double?>("MarksGrade")
                        .HasColumnName("MARKS_GRADE")
                        .HasColumnType("double precision");

                    b.Property<double?>("MarksPercnt")
                        .HasColumnName("MARKS_PERCNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Subjects")
                        .HasColumnName("SUBJECTS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ValidForEval")
                        .HasColumnName("VALID_FOR_EVAL")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_EDUCATION_pkey");

                    b.HasIndex("BoardId");

                    b.HasIndex("EduLevelId");

                    b.ToTable("PIS_EDUCATION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpAdvDedDtl", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AmountCur")
                        .HasColumnName("AMOUNT_CUR")
                        .HasColumnType("double precision");

                    b.Property<double?>("AmountPrev")
                        .HasColumnName("AMOUNT_PREV")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("EmpId");

                    b.ToTable("PIS_EMP_ADV_DED_DTL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpBarga", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("PIS_EMP_BARGA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpDep", b =>
                {
                    b.Property<decimal>("DeptId")
                        .HasColumnName("DEPT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AbsntKattiAccId")
                        .HasColumnName("ABSNT_KATTI_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AddInsrnceAccId")
                        .HasColumnName("ADD_INSRNCE_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AddPfAccId")
                        .HasColumnName("ADD_PF_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AllowanceAccId")
                        .HasColumnName("ALLOWANCE_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BhattaAccId")
                        .HasColumnName("BHATTA_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudgetSourceId")
                        .HasColumnName("BUDGET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BudjetSourceId")
                        .HasColumnName("BUDJET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CitAccId")
                        .HasColumnName("CIT_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("IncmeTaxAccId")
                        .HasColumnName("INCME_TAX_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LendPfDAccId")
                        .HasColumnName("LEND_PF_D_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .IsRequired()
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("OthrKattiAccId")
                        .HasColumnName("OTHR_KATTI_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PeskiKattiAccId")
                        .HasColumnName("PESKI_KATTI_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("SalaryAccId")
                        .HasColumnName("SALARY_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SapatiKattiAccId")
                        .HasColumnName("SAPATI_KATTI_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SocSecTax")
                        .HasColumnName("SOC_SEC_TAX")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubInsrnceAccId")
                        .HasColumnName("SUB_INSRNCE_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("SubPfAccId")
                        .HasColumnName("SUB_PF_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TdsAccId")
                        .HasColumnName("TDS_ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WorkId")
                        .HasColumnName("WORK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("DeptId")
                        .HasName("PIS_EMP_DEP_pkey");

                    b.ToTable("PIS_EMP_DEP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpDepSource", b =>
                {
                    b.Property<decimal?>("DeptId")
                        .HasColumnName("DEPT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("BudjetSourceId")
                        .HasColumnName("BUDJET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("DeptId")
                        .HasName("PIS_EMP_DEP_SOURCE_pkey");

                    b.HasIndex("BudjetSourceId");

                    b.ToTable("PIS_EMP_DEP_SOURCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpInsurancePaid", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PIS_EMP_INSURANCE_PAID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpLoans", b =>
                {
                    b.Property<decimal>("LoanId")
                        .HasColumnName("LOAN_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Cleared")
                        .HasColumnName("CLEARED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("InstallmentAmt")
                        .HasColumnName("INSTALLMENT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("LoanAmt")
                        .HasColumnName("LOAN_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<double?>("PaidAmount")
                        .HasColumnName("PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.HasKey("LoanId")
                        .HasName("PIS_EMP_LOANS_pkey");

                    b.HasIndex("EmpId");

                    b.ToTable("PIS_EMP_LOANS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpLongLeaves", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FromDateVs")
                        .HasColumnName("FROM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LeaveName")
                        .HasColumnName("LEAVE_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_LONG_LEAVES_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_LONG_LEAVES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpMedExpense", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IssuedDate")
                        .HasColumnName("ISSUED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RegularAmt")
                        .HasColumnName("REGULAR_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("SpecialAmt")
                        .HasColumnName("SPECIAL_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_MED_EXPENSE_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_MED_EXPENSE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpPunishmnts", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PunishDate")
                        .HasColumnName("PUNISH_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PunishType")
                        .HasColumnName("PUNISH_TYPE")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_PUNISHMNTS_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_PUNISHMNTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpSrvcDtls", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AppointmentType")
                        .HasColumnName("APPOINTMENT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("GeoRegion")
                        .HasColumnName("GEO_REGION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OfficeDetail")
                        .HasColumnName("OFFICE_DETAIL")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_SRVC_DTLS_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_SRVC_DTLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpSuspends", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FromDateVs")
                        .HasColumnName("FROM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_SUSPENDS_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_SUSPENDS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpTrnsfrRec", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AmtTaken")
                        .HasColumnName("AMT_TAKEN")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MovedDate")
                        .HasColumnName("MOVED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("RefNo")
                        .HasColumnName("REF_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TrnsfrDate")
                        .HasColumnName("TRNSFR_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TrnsfrdOffice")
                        .HasColumnName("TRNSFRD_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_EMP_TRNSFR_REC_pkey");

                    b.HasIndex("EmpId");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_EMP_TRNSFR_REC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmployeeMaster", b =>
                {
                    b.Property<decimal>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("AppoinmentType")
                        .HasColumnName("APPOINMENT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CitCode")
                        .HasColumnName("CIT_CODE")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CitId")
                        .HasColumnName("CIT_ID")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("CitPercent")
                        .HasColumnName("CIT_PERCENT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CitizenshipNo")
                        .HasColumnName("CITIZENSHIP_NO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("CsIssuedDate")
                        .HasColumnName("CS_ISSUED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("CsIssuedDistrict")
                        .HasColumnName("CS_ISSUED_DISTRICT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CurrentPostAppointDate")
                        .HasColumnName("CURRENT_POST_APPOINT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateOfBirth")
                        .HasColumnName("DATE_OF_BIRTH")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("DateOfBirthAd")
                        .HasColumnName("DATE_OF_BIRTH_AD")
                        .HasColumnType("date");

                    b.Property<string>("DeductAbsent")
                        .HasColumnName("DEDUCT_ABSENT")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("DeptId")
                        .HasColumnName("DEPT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DistrictId")
                        .HasColumnName("DISTRICT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasColumnName("FATHER_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("FirstAppointDate")
                        .HasColumnName("FIRST_APPOINT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FirstAppointPostId")
                        .HasColumnName("FIRST_APPOINT_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FirstNameEn")
                        .HasColumnName("FIRST_NAME_EN")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("FirstNameNp")
                        .HasColumnName("FIRST_NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Gender")
                        .HasColumnName("GENDER")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("GfName")
                        .HasColumnName("GF_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("GfOcupation")
                        .HasColumnName("GF_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("GovtEmpId")
                        .HasColumnName("GOVT_EMP_ID")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Grades")
                        .HasColumnName("GRADES")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("HusbandName")
                        .HasColumnName("HUSBAND_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("InsuranceFacility")
                        .HasColumnName("INSURANCE_FACILITY")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("InsuranceNo")
                        .HasColumnName("INSURANCE_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastNameEn")
                        .HasColumnName("LAST_NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastNameNp")
                        .HasColumnName("LAST_NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LekhaNo")
                        .HasColumnName("LEKHA_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MailAddress")
                        .HasColumnName("MAIL_ADDRESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MarriedStatus")
                        .HasColumnName("MARRIED_STATUS")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("MobileNo")
                        .HasColumnName("MOBILE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("ParentOcupation")
                        .HasColumnName("PARENT_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PayementBankId")
                        .HasColumnName("PAYEMENT_BANK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Paymode")
                        .HasColumnName("PAYMODE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("PensionKosh")
                        .HasColumnName("PENSION_KOSH")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("PfId")
                        .HasColumnName("PF_ID")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PostLevel")
                        .HasColumnName("POST_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PostStatus")
                        .HasColumnName("POST_STATUS")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<string>("RelWithWillPerson")
                        .HasColumnName("REL_WITH_WILL_PERSON")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Religion")
                        .HasColumnName("RELIGION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RetireDate")
                        .HasColumnName("RETIRE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("RoomId")
                        .HasColumnName("ROOM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ServiceGroup")
                        .HasColumnName("SERVICE_GROUP")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ServiceStatus")
                        .HasColumnName("SERVICE_STATUS")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("SpouseOcupation")
                        .HasColumnName("SPOUSE_OCUPATION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Title")
                        .HasColumnName("TITLE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("VdcId")
                        .HasColumnName("VDC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WillPerson")
                        .HasColumnName("WILL_PERSON")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("ZoneId")
                        .HasColumnName("ZONE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("EmpId")
                        .HasName("PIS_EMPLOYEE_MASTER_pkey");

                    b.HasIndex("DeptId");

                    b.HasIndex("FirstAppointPostId");

                    b.HasIndex("LocalPostId");

                    b.HasIndex("PayementBankId");

                    b.HasIndex("PostId");

                    b.ToTable("PIS_EMPLOYEE_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisForeignVisits", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("FromDateAd")
                        .HasColumnName("FROM_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("FromDateVs")
                        .HasColumnName("FROM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FundedBy")
                        .HasColumnName("FUNDED_BY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<DateTime?>("ToDateAd")
                        .HasColumnName("TO_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("VisitingPrpse")
                        .HasColumnName("VISITING_PRPSE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_FOREIGN_VISITS_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_FOREIGN_VISITS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisFulfilledDarbandi", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AppointmntType")
                        .HasColumnName("APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DarbandiId")
                        .HasColumnName("DARBANDI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateFulfilled")
                        .HasColumnName("DATE_FULFILLED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OfficeId")
                        .HasColumnName("OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_FULFILLED_DARBANDI_pkey");

                    b.HasIndex("DarbandiId");

                    b.HasIndex("LocalPostId");

                    b.HasIndex("OfficeId");

                    b.ToTable("PIS_FULFILLED_DARBANDI");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisGeoRegion", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Details")
                        .HasColumnName("DETAILS")
                        .HasColumnType("text");

                    b.Property<string>("GrId")
                        .HasColumnName("GR_ID")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("GrName")
                        .HasColumnName("GR_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<double?>("MarksPerYear")
                        .HasColumnName("MARKS_PER_YEAR")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PIS_GEO_REGION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisHajiri", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Betalabis")
                        .HasColumnName("BETALABIS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Bibis")
                        .HasColumnName("BIBIS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Cabis")
                        .HasColumnName("CABIS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Gayal")
                        .HasColumnName("GAYAL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Ghabis")
                        .HasColumnName("GHABIS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("HajiriDays")
                        .HasColumnName("HAJIRI_DAYS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPost")
                        .HasColumnName("LOCAL_POST")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Other")
                        .HasColumnName("OTHER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PublicHolidays")
                        .HasColumnName("PUBLIC_HOLIDAYS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TotalDays")
                        .HasColumnName("TOTAL_DAYS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_HAJIRI_pkey");

                    b.ToTable("PIS_HAJIRI");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisInternalTransfer", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AppointmntType")
                        .HasColumnName("APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DarbandiId")
                        .HasColumnName("DARBANDI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateOfDecision")
                        .HasColumnName("DATE_OF_DECISION")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DecisionReference")
                        .HasColumnName("DECISION_REFERENCE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OfficeId")
                        .HasColumnName("OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ReplacedEmpId")
                        .HasColumnName("REPLACED_EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ToAppointmntType")
                        .HasColumnName("TO_APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ToLocalPostId")
                        .HasColumnName("TO_LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ToOfficeId")
                        .HasColumnName("TO_OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_INTERNAL_TRANSFER_pkey");

                    b.HasIndex("AppointmntType");

                    b.HasIndex("DarbandiId");

                    b.HasIndex("EmpId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ToAppointmntType");

                    b.HasIndex("ToLocalPostId");

                    b.HasIndex("ToOfficeId");

                    b.ToTable("PIS_INTERNAL_TRANSFER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisLandBldngs", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("AquisitionTypeId")
                        .HasColumnName("AQUISITION_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("DistrictId")
                        .HasColumnName("DISTRICT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OwnershipDetails")
                        .HasColumnName("OWNERSHIP_DETAILS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("RoadId")
                        .HasColumnName("ROAD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Street")
                        .HasColumnName("STREET")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("UnitDesc")
                        .HasColumnName("UNIT_DESC")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VdcId")
                        .HasColumnName("VDC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ZoneId")
                        .HasColumnName("ZONE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_LAND_BLDNGS_pkey");

                    b.ToTable("PIS_LAND_BLDNGS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisLoanDhitoGiven", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReasonToTake")
                        .HasColumnName("REASON_TO_TAKE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReturningDuration")
                        .HasColumnName("RETURNING_DURATION")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("TransDesc")
                        .HasColumnName("TRANS_DESC")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ValueInNrs")
                        .HasColumnName("VALUE_IN_NRS")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("PIS_LOAN_DHITO_GIVEN_pkey");

                    b.ToTable("PIS_LOAN_DHITO_GIVEN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisLoanDhitoTaken", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReasonToTake")
                        .HasColumnName("REASON_TO_TAKE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ReturningDuration")
                        .HasColumnName("RETURNING_DURATION")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("TransDesc")
                        .HasColumnName("TRANS_DESC")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ValueInNrs")
                        .HasColumnName("VALUE_IN_NRS")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("PIS_LOAN_DHITO_TAKEN_pkey");

                    b.ToTable("PIS_LOAN_DHITO_TAKEN");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisLocalPostMaster", b =>
                {
                    b.Property<decimal>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Alllwance")
                        .HasColumnName("ALLLWANCE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Allowance")
                        .HasColumnName("ALLOWANCE")
                        .HasColumnType("double precision");

                    b.Property<double?>("Allwance")
                        .HasColumnName("ALLWANCE")
                        .HasColumnType("double precision");

                    b.Property<double?>("BasicSalary")
                        .HasColumnName("BASIC_SALARY")
                        .HasColumnType("double precision");

                    b.Property<double?>("GradeRate")
                        .HasColumnName("GRADE_RATE")
                        .HasColumnType("double precision");

                    b.Property<double?>("InsuranceAddAmt")
                        .HasColumnName("INSURANCE_ADD_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("LocalPostName")
                        .HasColumnName("LOCAL_POST_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("LocalPostNameEn")
                        .HasColumnName("LOCAL_POST_NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PayrollOrder")
                        .HasColumnName("PAYROLL_ORDER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PostDuties")
                        .HasColumnName("POST_DUTIES")
                        .HasColumnType("text");

                    b.Property<decimal?>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("LocalPostId")
                        .HasName("PIS_LOCAL_POST_MASTER_pkey");

                    b.HasIndex("PostId");

                    b.ToTable("PIS_LOCAL_POST_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisNijamatiSewaSamuha", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("GrpLevel")
                        .HasColumnName("GRP_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ParentId")
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("PIS_NIJAMATI_SEWA_SAMUHA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisOrnaments", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("AquisitionTypeId")
                        .HasColumnName("AQUISITION_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("UnitDesc")
                        .HasColumnName("UNIT_DESC")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_ORNAMENTS_pkey");

                    b.ToTable("PIS_ORNAMENTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisOtherAddSub", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddSub")
                        .HasColumnName("ADD_SUB")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(80)")
                        .HasMaxLength(80);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_OTHER_ADD_SUB");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPayrolls", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AbsentDays")
                        .HasColumnName("ABSENT_DAYS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AbsentDeductAmt")
                        .HasColumnName("ABSENT_DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("AdvanceDeductAmt")
                        .HasColumnName("ADVANCE_DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("AllowanceAmt")
                        .HasColumnName("ALLOWANCE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("BasicSalary")
                        .HasColumnName("BASIC_SALARY")
                        .HasColumnType("double precision");

                    b.Property<double?>("CitAmt")
                        .HasColumnName("CIT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("CitPercent")
                        .HasColumnName("CIT_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<string>("DeductDepVchrDateNep")
                        .HasColumnName("DEDUCT_DEP_VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("DeductDepVchrId")
                        .HasColumnName("DEDUCT_DEP_VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<int>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("integer");

                    b.Property<string>("EmpNameNp")
                        .HasColumnName("EMP_NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("FestiveVchrDateNep")
                        .HasColumnName("FESTIVE_VCHR_DATE_NEP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FestiveVchrId")
                        .HasColumnName("FESTIVE_VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<double?>("GradeAmount")
                        .HasColumnName("GRADE_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<short?>("GradeIncMonth")
                        .HasColumnName("GRADE_INC_MONTH")
                        .HasColumnType("smallint");

                    b.Property<double?>("GradeSalaryTotal")
                        .HasColumnName("GRADE_SALARY_TOTAL")
                        .HasColumnType("double precision");

                    b.Property<double?>("InsuranceAddAmt")
                        .HasColumnName("INSURANCE_ADD_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("InsuranceDeductAmt")
                        .HasColumnName("INSURANCE_DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("LoanDeductAmt")
                        .HasColumnName("LOAN_DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("LocalPost")
                        .HasColumnName("LOCAL_POST")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("smallint");

                    b.Property<double?>("NetSalary")
                        .HasColumnName("NET_SALARY")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherAllowanceAmt")
                        .HasColumnName("OTHER_ALLOWANCE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("OtherDeductTotal")
                        .HasColumnName("OTHER_DEDUCT_TOTAL")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("PayBankId")
                        .HasColumnName("PAY_BANK_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Paymode")
                        .HasColumnName("PAYMODE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("PensionkoshAddAmt")
                        .HasColumnName("PENSIONKOSH_ADD_AMT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PensionkoshDedAmt")
                        .HasColumnName("PENSIONKOSH_DED_AMT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PfAddAmt")
                        .HasColumnName("PF_ADD_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("PfDeductAmt")
                        .HasColumnName("PF_DEDUCT_AMT")
                        .HasColumnType("double precision");

                    b.Property<string>("PostInShort")
                        .HasColumnName("POST_IN_SHORT")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("PostLevel")
                        .HasColumnName("POST_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RateOfGrade")
                        .HasColumnName("RATE_OF_GRADE")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("TaxAmt")
                        .HasColumnName("TAX_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("TdsAmt")
                        .HasColumnName("TDS_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("TotalPayableSalary")
                        .HasColumnName("TOTAL_PAYABLE_SALARY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("TransTpeId")
                        .HasColumnName("TRANS_TPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VchrDateNp")
                        .HasColumnName("VCHR_DATE_NP")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("VchrId")
                        .HasColumnName("VCHR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("PIS_PAYROLLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPdOrgInvlvmnt", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NoOfBenificPopln")
                        .HasColumnName("NO_OF_BENIFIC_POPLN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OrgAcheivmnts")
                        .HasColumnName("ORG_ACHEIVMNTS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("OrgAdd")
                        .HasColumnName("ORG_ADD")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("OrgAims")
                        .HasColumnName("ORG_AIMS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("OrgFormedDate")
                        .HasColumnName("ORG_FORMED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OrgJoinedDate")
                        .HasColumnName("ORG_JOINED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OrgLeftDate")
                        .HasColumnName("ORG_LEFT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("OrgName")
                        .HasColumnName("ORG_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("PostInOrg")
                        .HasColumnName("POST_IN_ORG")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RespnsbltyInOrg")
                        .HasColumnName("RESPNSBLTY_IN_ORG")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_PD_ORG_INVLVMNT_pkey");

                    b.ToTable("PIS_PD_ORG_INVLVMNT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPdSrvcDtls", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AppointmntLevel")
                        .HasColumnName("APPOINTMNT_LEVEL")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("AppointmntType")
                        .HasColumnName("APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateFrom")
                        .HasColumnName("DATE_FROM")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateTo")
                        .HasColumnName("DATE_TO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OfficeDetail")
                        .HasColumnName("OFFICE_DETAIL")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Sn")
                        .HasName("PIS_PD_SRVC_DTLS_pkey");

                    b.ToTable("PIS_PD_SRVC_DTLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPersonVisitRecrd", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("AmountTaken")
                        .HasColumnName("AMOUNT_TAKEN")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("FromDate")
                        .HasColumnName("FROM_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("JobDetails")
                        .HasColumnName("JOB_DETAILS")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("PersonId")
                        .HasColumnName("PERSON_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PersonName")
                        .HasColumnName("PERSON_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PersonPost")
                        .HasColumnName("PERSON_POST")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("PersonTypeId")
                        .HasColumnName("PERSON_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RefNo")
                        .HasColumnName("REF_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ToDate")
                        .HasColumnName("TO_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("VisitLocation")
                        .HasColumnName("VISIT_LOCATION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Sn")
                        .HasName("PIS_PERSON_VISIT_RECRD_pkey");

                    b.ToTable("PIS_PERSON_VISIT_RECRD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPostMaster", b =>
                {
                    b.Property<decimal>("PostId")
                        .HasColumnName("POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("BasicSalary")
                        .HasColumnName("BASIC_SALARY")
                        .HasColumnType("double precision");

                    b.Property<string>("GeneralPost")
                        .HasColumnName("GENERAL_POST")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("GeneralPostShort")
                        .HasColumnName("GENERAL_POST_SHORT")
                        .HasColumnType("character varying(40)")
                        .HasMaxLength(40);

                    b.Property<decimal?>("MaxGradeRate")
                        .HasColumnName("MAX_GRADE_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PostLevel")
                        .HasColumnName("POST_LEVEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PrabidikOrPrasasan")
                        .HasColumnName("PRABIDIK_OR_PRASASAN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("RateOfGrade")
                        .HasColumnName("RATE_OF_GRADE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("PostId")
                        .HasName("PIS_POST_MASTER_pkey");

                    b.ToTable("PIS_POST_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPrizes", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("AwardType")
                        .HasColumnName("AWARD_TYPE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("AwardedBy")
                        .HasColumnName("AWARDED_BY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IssuedDate")
                        .HasColumnName("ISSUED_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_PRIZES_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_PRIZES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPublication", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Publisher")
                        .HasColumnName("PUBLISHER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("PublshDateAd")
                        .HasColumnName("PUBLSH_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("PublshDateVs")
                        .HasColumnName("PUBLSH_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_PUBLICATION_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_PUBLICATION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPyrollLoanDtls", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Cleared")
                        .HasColumnName("CLEARED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("InstallmentAmt")
                        .HasColumnName("INSTALLMENT_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("LoandAmt")
                        .HasColumnName("LOAND_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("LoandId")
                        .HasColumnName("LOAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("smallint");

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("PayrollId")
                        .HasColumnName("PAYROLL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("EmpId");

                    b.HasIndex("LoandId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PIS_PYROLL_LOAN_DTLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPyrollOthrDtls", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddSub")
                        .HasColumnName("ADD_SUB")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("EmployeeId")
                        .HasColumnName("EMPLOYEE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("PayrollId")
                        .HasColumnName("PAYROLL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SourceType")
                        .HasColumnName("SOURCE_TYPE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PIS_PYROLL_OTHR_DTLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisReplacedInDarbandi", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AppointmntType")
                        .HasColumnName("APPOINTMNT_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("DarbandiId")
                        .HasColumnName("DARBANDI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateFulfilled")
                        .HasColumnName("DATE_FULFILLED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateOfDecision")
                        .HasColumnName("DATE_OF_DECISION")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DateReplaced")
                        .HasColumnName("DATE_REPLACED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DecisionReference")
                        .HasColumnName("DECISION_REFERENCE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EntrySnInFd")
                        .HasColumnName("ENTRY_SN_IN_FD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("IsPlacedInDarbandi")
                        .HasColumnName("IS_PLACED_IN_DARBANDI")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OfficeId")
                        .HasColumnName("OFFICE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("ReplacedBy")
                        .HasColumnName("REPLACED_BY")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_REPLACED_IN_DARBANDI_pkey");

                    b.HasIndex("DarbandiId");

                    b.HasIndex("EntrySnInFd");

                    b.HasIndex("OfficeId");

                    b.ToTable("PIS_REPLACED_IN_DARBANDI");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisServiceStatus", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NameEn")
                        .HasColumnName("NAME_EN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PIS_SERVICE_STATUS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisSgnfcntWork", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Duration")
                        .HasColumnName("DURATION")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("FromDateAd")
                        .HasColumnName("FROM_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("FromDateVs")
                        .HasColumnName("FROM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NameNp")
                        .HasColumnName("NAME_NP")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ToDateAd")
                        .HasColumnName("TO_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_SGNFCNT_WORK_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_SGNFCNT_WORK");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisShareBankbalance", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("AquisitionTypeId")
                        .HasColumnName("AQUISITION_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CompanyOrBank")
                        .HasColumnName("COMPANY_OR_BANK")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<DateTime?>("DataEditAdDate")
                        .HasColumnName("DATA_EDIT_AD_DATE")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DataEntryAdDate")
                        .HasColumnName("DATA_ENTRY_AD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("DataEntryVsDate")
                        .HasColumnName("DATA_ENTRY_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("OwnershipDetails")
                        .HasColumnName("OWNERSHIP_DETAILS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SpecialNotes")
                        .HasColumnName("SPECIAL_NOTES")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("UserId")
                        .HasColumnName("USER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UserIde")
                        .HasColumnName("USER_IDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ValueInNrs")
                        .HasColumnName("VALUE_IN_NRS")
                        .HasColumnType("double precision");

                    b.HasKey("Sn")
                        .HasName("PIS_SHARE_BANKBALANCE_pkey");

                    b.ToTable("PIS_SHARE_BANKBALANCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisTraining", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CountryId")
                        .HasColumnName("COUNTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Division")
                        .HasColumnName("DIVISION")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Duration")
                        .HasColumnName("DURATION")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("FrmDateAd")
                        .HasColumnName("FRM_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("FrmDateVs")
                        .HasColumnName("FRM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Institute")
                        .HasColumnName("INSTITUTE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("MarksObtnd")
                        .HasColumnName("MARKS_OBTND")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("ToDateAd")
                        .HasColumnName("TO_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("TrainingName")
                        .HasColumnName("TRAINING_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("TrainingType")
                        .HasColumnName("TRAINING_TYPE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("ValidForEval")
                        .HasColumnName("VALID_FOR_EVAL")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_TRAINING_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_TRAINING");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisVisitedCountries", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CountryId")
                        .HasColumnName("COUNTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("VisitId")
                        .HasColumnName("VISIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("PIS_VISITED_COUNTRIES_pkey");

                    b.HasIndex("VisitId");

                    b.ToTable("PIS_VISITED_COUNTRIES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisWorkshop", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ApplyTo")
                        .HasColumnName("APPLY_TO")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CountryId")
                        .HasColumnName("COUNTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Duration")
                        .HasColumnName("DURATION")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("FromDateAd")
                        .HasColumnName("FROM_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("FromDateVs")
                        .HasColumnName("FROM_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("LocalPostId")
                        .HasColumnName("LOCAL_POST_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Organizer")
                        .HasColumnName("ORGANIZER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<DateTime?>("ToDateAd")
                        .HasColumnName("TO_DATE_AD")
                        .HasColumnType("date");

                    b.Property<string>("ToDateVs")
                        .HasColumnName("TO_DATE_VS")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("WorkingOffice")
                        .HasColumnName("WORKING_OFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("PIS_WORKSHOP_pkey");

                    b.HasIndex("LocalPostId");

                    b.ToTable("PIS_WORKSHOP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PmsYojtype", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("YojtypeNameEng")
                        .HasColumnName("YOJTYPE_NAME_ENG")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("YojtypeNameNp")
                        .IsRequired()
                        .HasColumnName("YOJTYPE_NAME_NP")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("YojtypeRemarks")
                        .HasColumnName("YOJTYPE_REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PMS_YOJTYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.RentDarRate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Ratename")
                        .HasColumnName("RATENAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<double?>("RentPer")
                        .HasColumnName("RENT_PER")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("RentTypeid")
                        .HasColumnName("RENT_TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("RENT_DAR_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Renttype", b =>
                {
                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.ToTable("RENTTYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.ReportGeneral", b =>
                {
                    b.Property<string>("AnusuchiDetails")
                        .HasColumnName("ANUSUCHI_DETAILS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AnusuchiHead")
                        .HasColumnName("ANUSUCHI_HEAD")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("OfficeTypeId")
                        .HasColumnName("OFFICE_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReportFor")
                        .HasColumnName("REPORT_FOR")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ReportHeading")
                        .HasColumnName("REPORT_HEADING")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("ReportId")
                        .HasColumnName("REPORT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ReportName")
                        .HasColumnName("REPORT_NAME")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.ToTable("REPORT_GENERAL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SanitationGroup", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Groupname")
                        .HasColumnName("GROUPNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SANITATION_GROUP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SanitationRate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaUpto")
                        .HasColumnName("AREA_UPTO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EachAreaRate")
                        .HasColumnName("EACH_AREA_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ForEachArea")
                        .HasColumnName("FOR_EACH_AREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("double precision");

                    b.Property<string>("Ratename")
                        .HasColumnName("RATENAME")
                        .HasColumnType("text");

                    b.Property<decimal?>("RoadTypeid")
                        .HasColumnName("ROAD_TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Subgroupid")
                        .HasColumnName("SUBGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.HasIndex("Subgroupid");

                    b.ToTable("SANITATION_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SanitationSubgroup", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Subgroupname")
                        .HasColumnName("SUBGROUPNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.ToTable("SANITATION_SUBGROUP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.ServiceChargeMaster", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<int?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("integer");

                    b.Property<double?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("double precision");

                    b.Property<short?>("Isapplicableforhouse")
                        .HasColumnName("ISAPPLICABLEFORHOUSE")
                        .HasColumnType("smallint");

                    b.Property<int?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("integer");

                    b.Property<double?>("ServiceChargePercent")
                        .HasColumnName("SERVICE_CHARGE_PERCENT")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("SERVICE_CHARGE_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Spacemeasuringunits", b =>
                {
                    b.Property<decimal?>("Sqftperunit")
                        .HasColumnName("SQFTPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Unitid")
                        .HasColumnName("UNITID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Unitname")
                        .HasColumnName("UNITNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.ToTable("SPACEMEASURINGUNITS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Storedbills", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billnofrom")
                        .HasColumnName("BILLNOFROM")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Billnoto")
                        .HasColumnName("BILLNOTO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Billtypeid")
                        .HasColumnName("BILLTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Dateissued")
                        .HasColumnName("DATEISSUED")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.HasKey("Sn")
                        .HasName("STOREDBILLS_pkey");

                    b.HasIndex("Billtypeid");

                    b.ToTable("STOREDBILLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SubModuleSource", b =>
                {
                    b.Property<decimal>("SubModuleId")
                        .HasColumnName("SUB_MODULE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal>("BudjetSourceId")
                        .HasColumnName("BUDJET_SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("SubModuleId", "BudjetSourceId")
                        .HasName("SUB_MODULE_SOURCE_pkey");

                    b.HasIndex("BudjetSourceId");

                    b.ToTable("SUB_MODULE_SOURCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SubjectArea", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("text");

                    b.Property<decimal?>("ParentId")
                        .HasColumnName("PARENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("SUBJECT_AREA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvBusinessmaster", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Addresschange")
                        .HasColumnName("ADDRESSCHANGE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Areainsquarefeets")
                        .HasColumnName("AREAINSQUAREFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("BusinessStatus")
                        .HasColumnName("BUSINESS_STATUS")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Businessgroupid")
                        .HasColumnName("BUSINESSGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BusinessownertaxIid")
                        .HasColumnName("BUSINESSOWNERTAX_IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Businessstartingdate")
                        .HasColumnName("BUSINESSSTARTINGDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CloseReason")
                        .HasColumnName("CLOSE_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClosedVsDate")
                        .HasColumnName("CLOSED_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Contentofsignboard")
                        .HasColumnName("CONTENTOFSIGNBOARD")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Emails")
                        .HasColumnName("EMAILS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Houseno")
                        .HasColumnName("HOUSENO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Houseowner")
                        .HasColumnName("HOUSEOWNER")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Initialcapital")
                        .HasColumnName("INITIALCAPITAL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Initialregdate")
                        .HasColumnName("INITIALREGDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Initialregisteredoffice")
                        .HasColumnName("INITIALREGISTEREDOFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Initialregno")
                        .HasColumnName("INITIALREGNO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<short?>("Isinrent")
                        .HasColumnName("ISINRENT")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Lengthofsignboard")
                        .HasColumnName("LENGTHOFSIGNBOARD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MailAddress")
                        .HasColumnName("MAIL_ADDRESS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("Maxcapital")
                        .HasColumnName("MAXCAPITAL")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Monthlyrent")
                        .HasColumnName("MONTHLYRENT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Municipallregdate")
                        .HasColumnName("MUNICIPALLREGDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Municipalregno")
                        .HasColumnName("MUNICIPALREGNO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("PaidLastFiscalyear")
                        .HasColumnName("PAID_LAST_FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Sanitationid")
                        .HasColumnName("SANITATIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Shiftdate")
                        .HasColumnName("SHIFTDATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Shifttaxpayerid")
                        .HasColumnName("SHIFTTAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Sqfeetsofsignboard")
                        .HasColumnName("SQFEETSOFSIGNBOARD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Street")
                        .HasColumnName("STREET")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Trackid")
                        .HasColumnName("TRACKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Typeid")
                        .HasColumnName("TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Vdcid")
                        .HasColumnName("VDCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Widthofsignboard")
                        .HasColumnName("WIDTHOFSIGNBOARD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("YearlyTranAmount")
                        .HasColumnName("YEARLY_TRAN_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Zoneid")
                        .HasColumnName("ZONEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("SV_BUSINESSMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvConstructions", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Areainsqfeet")
                        .HasColumnName("AREAINSQFEET")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Constructiontypeid")
                        .HasColumnName("CONSTRUCTIONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Constructionusestypeid")
                        .HasColumnName("CONSTRUCTIONUSESTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Heightinfeet")
                        .HasColumnName("HEIGHTINFEET")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Includeinevaluation")
                        .HasColumnName("INCLUDEINEVALUATION")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Lengthinfeet")
                        .HasColumnName("LENGTHINFEET")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Selfuseorinrent")
                        .HasColumnName("SELFUSEORINRENT")
                        .HasColumnType("smallint");

                    b.Property<string>("Specialnote")
                        .HasColumnName("SPECIALNOTE")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal?>("Talanumber")
                        .HasColumnName("TALANUMBER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TaxpayerDefineAmount")
                        .HasColumnName("TAXPAYER_DEFINE_AMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Vsdateofmade")
                        .HasColumnName("VSDATEOFMADE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Vsmappdate")
                        .HasColumnName("VSMAPPDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Widththinfeet")
                        .HasColumnName("WIDTHTHINFEET")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("SV_CONSTRUCTIONS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvHouses", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Aquisitiondate")
                        .HasColumnName("AQUISITIONDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Areainsqfeets")
                        .HasColumnName("AREAINSQFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Areaofconstructionsinsqfeets")
                        .HasColumnName("AREAOFCONSTRUCTIONSINSQFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BinGis")
                        .HasColumnName("BIN_GIS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Buildingcode")
                        .HasColumnName("BUILDINGCODE")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("DefineAmt")
                        .HasColumnName("DEFINE_AMT")
                        .HasColumnType("double precision");

                    b.Property<short?>("Hasmapregistered")
                        .HasColumnName("HASMAPREGISTERED")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Heightinfeets")
                        .HasColumnName("HEIGHTINFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Houseconstructiontypeid")
                        .HasColumnName("HOUSECONSTRUCTIONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Housenumber")
                        .HasColumnName("HOUSENUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Housetypeid")
                        .HasColumnName("HOUSETYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Includeinevaluation")
                        .HasColumnName("INCLUDEINEVALUATION")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Lengthinfeets")
                        .HasColumnName("LENGTHINFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Mapregistereddate")
                        .HasColumnName("MAPREGISTEREDDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Numoftalas")
                        .HasColumnName("NUMOFTALAS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SalesDt")
                        .HasColumnName("SALES_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Sanitationrateid")
                        .HasColumnName("SANITATIONRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Specialnote")
                        .HasColumnName("SPECIALNOTE")
                        .HasColumnType("text");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Usestypeid")
                        .HasColumnName("USESTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Vsdateofmade")
                        .HasColumnName("VSDATEOFMADE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Widthinfeets")
                        .HasColumnName("WIDTHINFEETS")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("SV_HOUSES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvLands", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Aquisitiondate")
                        .HasColumnName("AQUISITIONDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Aquisitiontypeid")
                        .HasColumnName("AQUISITIONTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaTypeId")
                        .HasColumnName("AREA_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Areainsqft")
                        .HasColumnName("AREAINSQFT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreainsqftField")
                        .HasColumnName("AREAINSQFT_FIELD")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Deigstertypeid")
                        .HasColumnName("DEIGSTERTYPEID")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Eastboundary")
                        .HasColumnName("EASTBOUNDARY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("EastboundaryKitta")
                        .HasColumnName("EASTBOUNDARY_KITTA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Eastrunft")
                        .HasColumnName("EASTRUNFT")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Evalexclusionreasonid")
                        .HasColumnName("EVALEXCLUSIONREASONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("GridNo")
                        .HasColumnName("GRID_NO")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short?>("Hastrack")
                        .HasColumnName("HASTRACK")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Includeinevaluation")
                        .HasColumnName("INCLUDEINEVALUATION")
                        .HasColumnType("smallint");

                    b.Property<string>("IsLrmisAdd")
                        .HasColumnName("IS_LRMIS_ADD")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("text");

                    b.Property<string>("LandRules")
                        .HasColumnName("LAND_RULES")
                        .HasColumnType("text");

                    b.Property<decimal?>("Landmeasuringunitid")
                        .HasColumnName("LANDMEASURINGUNITID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landnatureid")
                        .HasColumnName("LANDNATUREID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landtype")
                        .HasColumnName("LANDTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Locationfactorid")
                        .HasColumnName("LOCATIONFACTORID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Lqtypeid")
                        .HasColumnName("LQTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Malpotrate")
                        .HasColumnName("MALPOTRATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Mapnumber")
                        .HasColumnName("MAPNUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Mothnumber")
                        .HasColumnName("MOTHNUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("NominationArea")
                        .HasColumnName("NOMINATION_AREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NominationBreadth")
                        .HasColumnName("NOMINATION_BREADTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NominationDirection")
                        .HasColumnName("NOMINATION_DIRECTION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NominationLength")
                        .HasColumnName("NOMINATION_LENGTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NominationTf")
                        .HasColumnName("NOMINATION_TF")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Nonfunctionalareainsqft")
                        .HasColumnName("NONFUNCTIONALAREAINSQFT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NorthboundaryKitta")
                        .HasColumnName("NORTHBOUNDARY_KITTA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Northrunft")
                        .HasColumnName("NORTHRUNFT")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Northtboundary")
                        .HasColumnName("NORTHTBOUNDARY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<decimal?>("Oldvdcid")
                        .HasColumnName("OLDVDCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Oldwardno")
                        .HasColumnName("OLDWARDNO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("SalesDt")
                        .HasColumnName("SALES_DT")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Selfdeclaredvalueinrs")
                        .HasColumnName("SELFDECLAREDVALUEINRS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SheetNo")
                        .HasColumnName("SHEET_NO")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SouthboundaryKitta")
                        .HasColumnName("SOUTHBOUNDARY_KITTA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Southrunft")
                        .HasColumnName("SOUTHRUNFT")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Southtboundary")
                        .HasColumnName("SOUTHTBOUNDARY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Specialnote")
                        .HasColumnName("SPECIALNOTE")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Streetname")
                        .HasColumnName("STREETNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Tolename")
                        .HasColumnName("TOLENAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Trackid")
                        .HasColumnName("TRACKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Trackrelationid")
                        .HasColumnName("TRACKRELATIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Usestypeid")
                        .HasColumnName("USESTYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Valueinrsonaquisition")
                        .HasColumnName("VALUEINRSONAQUISITION")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Westboundary")
                        .HasColumnName("WESTBOUNDARY")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("WestboundaryKitta")
                        .HasColumnName("WESTBOUNDARY_KITTA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Westrunft")
                        .HasColumnName("WESTRUNFT")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("SV_LANDS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvLandsmultievaluationdetail", b =>
                {
                    b.Property<decimal?>("Areainsqft")
                        .HasColumnName("AREAINSQFT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("SV_LANDSMULTIEVALUATIONDETAIL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvPeople", b =>
                {
                    b.Property<decimal>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CancelDate")
                        .HasColumnName("CANCEL_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("CancelReason")
                        .HasColumnName("CANCEL_REASON")
                        .HasColumnType("text");

                    b.Property<string>("Ccissueddate")
                        .HasColumnName("CCISSUEDDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Ccissueddristictid")
                        .HasColumnName("CCISSUEDDRISTICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Ccnumber")
                        .HasColumnName("CCNUMBER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Corespaddressline1")
                        .HasColumnName("CORESPADDRESSLINE1")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Corespaddressline2")
                        .HasColumnName("CORESPADDRESSLINE2")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Corespaddressline3")
                        .HasColumnName("CORESPADDRESSLINE3")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Corespaddressline4")
                        .HasColumnName("CORESPADDRESSLINE4")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Countryid")
                        .HasColumnName("COUNTRYID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Dob")
                        .HasColumnName("DOB")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Eid")
                        .HasColumnName("EID")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Fatherorhusband")
                        .HasColumnName("FATHERORHUSBAND")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Firstengname")
                        .HasColumnName("FIRSTENGNAME")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Firstnepname")
                        .HasColumnName("FIRSTNEPNAME")
                        .HasColumnType("character varying(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Gforfinlaw")
                        .HasColumnName("GFORFINLAW")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<short?>("Hascc")
                        .HasColumnName("HASCC")
                        .HasColumnType("smallint");

                    b.Property<double?>("HltUnpaidAmount")
                        .HasColumnName("HLT_UNPAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("HltUnpaidFiscalYear")
                        .HasColumnName("HLT_UNPAID_FISCAL_YEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Houseno")
                        .HasColumnName("HOUSENO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Individualtype")
                        .HasColumnName("INDIVIDUALTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("IptUnpaidAmount")
                        .HasColumnName("IPT_UNPAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("IptUnpaidFiscalYear")
                        .HasColumnName("IPT_UNPAID_FISCAL_YEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("IsLrmisAdd")
                        .HasColumnName("IS_LRMIS_ADD")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("IsUnpaidCleared")
                        .HasColumnName("IS_UNPAID_CLEARED")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Lastengname")
                        .HasColumnName("LASTENGNAME")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Lastnepname")
                        .HasColumnName("LASTNEPNAME")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<string>("Mobiles")
                        .HasColumnName("MOBILES")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<decimal?>("Motherlanguageid")
                        .HasColumnName("MOTHERLANGUAGEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Nationalityid")
                        .HasColumnName("NATIONALITYID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Ocupationid")
                        .HasColumnName("OCUPATIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Otherdetails")
                        .HasColumnName("OTHERDETAILS")
                        .HasColumnType("character varying(180)")
                        .HasMaxLength(180);

                    b.Property<string>("Phones")
                        .HasColumnName("PHONES")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Photo")
                        .HasColumnName("PHOTO")
                        .HasColumnType("text");

                    b.Property<decimal?>("Religionid")
                        .HasColumnName("RELIGIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Sex")
                        .HasColumnName("SEX")
                        .HasColumnType("smallint");

                    b.Property<string>("Streetname")
                        .HasColumnName("STREETNAME")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<decimal?>("Tolbikashid")
                        .HasColumnName("TOLBIKASHID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Trackid")
                        .HasColumnName("TRACKID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Vdcid")
                        .HasColumnName("VDCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Zoneid")
                        .HasColumnName("ZONEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Iid")
                        .HasName("SV_PEOPLE_pkey");

                    b.ToTable("SV_PEOPLE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvTbhousekittanumber", b =>
                {
                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("SV_TBHOUSEKITTANUMBER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SvVehiclemaster", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Aquiredfrom")
                        .HasColumnName("AQUIREDFROM")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Aquisitiondate")
                        .HasColumnName("AQUISITIONDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Aquisitiontype")
                        .HasColumnName("AQUISITIONTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Ccorhprspower")
                        .HasColumnName("CCORHPRSPOWER")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Chesisno")
                        .HasColumnName("CHESISNO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CloseReason")
                        .HasColumnName("CLOSE_REASON")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClosedVsDate")
                        .HasColumnName("CLOSED_VS_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Color")
                        .HasColumnName("COLOR")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Engineno")
                        .HasColumnName("ENGINENO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Madeof")
                        .HasColumnName("MADEOF")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<string>("Modeldescription")
                        .HasColumnName("MODELDESCRIPTION")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Municipaltyregdate")
                        .HasColumnName("MUNICIPALTYREGDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Municipaltyregno")
                        .HasColumnName("MUNICIPALTYREGNO")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Namasarimiti")
                        .HasColumnName("NAMASARIMITI")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Namasaritaxpayerid")
                        .HasColumnName("NAMASARITAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Noofcilenders")
                        .HasColumnName("NOOFCILENDERS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Numberofseates")
                        .HasColumnName("NUMBEROFSEATES")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PaidLastFiscalyear")
                        .HasColumnName("PAID_LAST_FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Registereddate")
                        .HasColumnName("REGISTEREDDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Registeredoffice")
                        .HasColumnName("REGISTEREDOFFICE")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Usedfuel")
                        .HasColumnName("USEDFUEL")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Usestype")
                        .HasColumnName("USESTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("VehicleStatus")
                        .HasColumnName("VEHICLE_STATUS")
                        .HasColumnType("smallint");

                    b.Property<string>("Vehiclename")
                        .HasColumnName("VEHICLENAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("Vehicleno")
                        .HasColumnName("VEHICLENO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Vehicletype")
                        .HasColumnName("VEHICLETYPE")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("SV_VEHICLEMASTER_pkey");

                    b.ToTable("SV_VEHICLEMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxAddtnlChrgDtls", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BillId")
                        .HasColumnName("BILL_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BillNo")
                        .HasColumnName("BILL_NO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<double?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<short?>("Isapplicableforhouse")
                        .HasColumnName("ISAPPLICABLEFORHOUSE")
                        .HasColumnType("smallint");

                    b.Property<string>("Isregistationfee")
                        .HasColumnName("ISREGISTATIONFEE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("LandId")
                        .HasColumnName("LAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("RentId")
                        .HasColumnName("RENT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ServiceChargePercent")
                        .HasColumnName("SERVICE_CHARGE_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<string>("ServiceChargeType")
                        .HasColumnName("SERVICE_CHARGE_TYPE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("TaxType")
                        .HasColumnName("TAX_TYPE")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.HasKey("Sn")
                        .HasName("TAX_ADDTNL_CHRG_DTLS_pkey");

                    b.HasIndex("AccId");

                    b.HasIndex("Accode");

                    b.ToTable("TAX_ADDTNL_CHRG_DTLS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxMalpot", b =>
                {
                    b.Property<double?>("Additionalcharges")
                        .HasColumnName("ADDITIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("text");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("LastTaxPaidAmount")
                        .HasColumnName("LAST_TAX_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Netevaluatingarea")
                        .HasColumnName("NETEVALUATINGAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Nonevaluatedarea")
                        .HasColumnName("NONEVALUATEDAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<long?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("bigint");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("text");

                    b.Property<double?>("Taxpaidamount")
                        .HasColumnName("TAXPAIDAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Totalarea")
                        .HasColumnName("TOTALAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TAX_MALPOT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxMalpotHistory", b =>
                {
                    b.Property<double?>("Additionalcharges")
                        .HasColumnName("ADDITIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Generalrateid")
                        .HasColumnName("GENERALRATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Kittanumber")
                        .HasColumnName("KITTANUMBER")
                        .HasColumnType("text");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("LastTaxPaidAmount")
                        .HasColumnName("LAST_TAX_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<long?>("MalpotId")
                        .HasColumnName("MALPOT_ID")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Netevaluatingarea")
                        .HasColumnName("NETEVALUATINGAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Nonevaluatedarea")
                        .HasColumnName("NONEVALUATEDAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("double precision");

                    b.Property<double?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<long?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("bigint");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("text");

                    b.Property<double?>("Taxpaidamount")
                        .HasColumnName("TAXPAIDAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Totalarea")
                        .HasColumnName("TOTALAREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TAX_MALPOT_HISTORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxRateCeiling", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("MarriedStatus")
                        .HasColumnName("MARRIED_STATUS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NpFrom")
                        .HasColumnName("NP_FROM")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("NpTo")
                        .HasColumnName("NP_TO")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("TaxRate")
                        .HasColumnName("TAX_RATE")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TAX_RATE_CEILING");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxRental", b =>
                {
                    b.Property<double?>("Additionalcharges")
                        .HasColumnName("ADDITIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Constructionid")
                        .HasColumnName("CONSTRUCTIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataentryaddate")
                        .HasColumnName("DATAENTRYADDATE")
                        .HasColumnType("date");

                    b.Property<string>("Dateentryvsdate")
                        .HasColumnName("DATEENTRYVSDATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<double?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("LastTaxPaidAmount")
                        .HasColumnName("LAST_TAX_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rentid")
                        .HasColumnName("RENTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Taxpaidamount")
                        .HasColumnName("TAXPAIDAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TAX_RENTAL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxRtRentdtl", b =>
                {
                    b.Property<string>("AgreementDate")
                        .HasColumnName("AGREEMENT_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("AnualRentIncome")
                        .HasColumnName("ANUAL_RENT_INCOME")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Businessid")
                        .HasColumnName("BUSINESSID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ConstructionId")
                        .HasColumnName("CONSTRUCTION_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsTaxPaidBusinessPerson")
                        .HasColumnName("IS_TAX_PAID_BUSINESS_PERSON")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<decimal?>("RentInsqfeet")
                        .HasColumnName("RENT_INSQFEET")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("RentStatus")
                        .HasColumnName("RENT_STATUS")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("RentTypeId")
                        .HasColumnName("RENT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Rname")
                        .HasColumnName("RNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("ValidUntil")
                        .HasColumnName("VALID_UNTIL")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.ToTable("TAX_RT_RENTDTL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxSanitation", b =>
                {
                    b.Property<string>("Billdate")
                        .HasColumnName("BILLDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Billid")
                        .HasColumnName("BILLID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Billno")
                        .HasColumnName("BILLNO")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<decimal?>("Counterid")
                        .HasColumnName("COUNTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("Dataeditaddatetime")
                        .HasColumnName("DATAEDITADDATETIME")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dataentryaddatetime")
                        .HasColumnName("DATAENTRYADDATETIME")
                        .HasColumnType("date");

                    b.Property<string>("Dataentryvsdate")
                        .HasColumnName("DATAENTRYVSDATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Fineamount")
                        .HasColumnName("FINEAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("LastTaxPaidAmount")
                        .HasColumnName("LAST_TAX_PAID_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Month")
                        .HasColumnName("MONTH")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Nettaxamount")
                        .HasColumnName("NETTAXAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Reductionalcharges")
                        .HasColumnName("REDUCTIONALCHARGES")
                        .HasColumnType("double precision");

                    b.Property<string>("Servicetype")
                        .HasColumnName("SERVICETYPE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Specialnotes")
                        .HasColumnName("SPECIALNOTES")
                        .HasColumnType("text");

                    b.Property<double?>("Taxpaidamount")
                        .HasColumnName("TAXPAIDAMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Taxpayerid")
                        .HasColumnName("TAXPAYERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Useride")
                        .HasColumnName("USERIDE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Year")
                        .HasColumnName("YEAR")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TAX_SANITATION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxThliIssuedCntr", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("CntrId")
                        .HasColumnName("CNTR_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TheliId")
                        .HasColumnName("THELI_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id")
                        .HasName("TAX_THLI_ISSUED_CNTR_pkey");

                    b.HasIndex("CntrId");

                    b.HasIndex("TheliId");

                    b.ToTable("TAX_THLI_ISSUED_CNTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tbhousekittanumber", b =>
                {
                    b.Property<decimal?>("Houseid")
                        .HasColumnName("HOUSEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Landid")
                        .HasColumnName("LANDID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TBHOUSEKITTANUMBER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBankAccntType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("TBL_BANK_ACCNT_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBankFinanceInstitutue", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AccountName")
                        .HasColumnName("ACCOUNT_NAME")
                        .HasColumnType("text");

                    b.Property<string>("Descriptiong")
                        .HasColumnName("DESCRIPTIONG")
                        .HasColumnType("text");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TBL_BANK_FINANCE_INSTITUTUE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmt", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BgtSubHeadId")
                        .HasColumnName("BGT_SUB_HEAD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("TotalBgtAmt")
                        .HasColumnName("TOTAL_BGT_AMT")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TBL_BGT_MGMT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExp", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("BgtAmt")
                        .HasColumnName("BGT_AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtId")
                        .HasColumnName("BGT_MGMT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtId");

                    b.ToTable("TBL_BGT_MGMT_EXP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExpOrg", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("BgtAmtOrg")
                        .HasColumnName("BGT_AMT_ORG")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtOrgId")
                        .HasColumnName("BGT_MGMT_ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtOrgId");

                    b.ToTable("TBL_BGT_MGMT_EXP_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExpRelease", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amt")
                        .HasColumnName("AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtReleaseId")
                        .HasColumnName("BGT_MGMT_RELEASE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtReleaseId");

                    b.ToTable("TBL_BGT_MGMT_EXP_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtOrg", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BgtSubHeadId")
                        .HasColumnName("BGT_SUB_HEAD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<double?>("TotalBgtAmtOrg")
                        .HasColumnName("TOTAL_BGT_AMT_ORG")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TBL_BGT_MGMT_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtRelease", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amt")
                        .HasColumnName("AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtReleaseId")
                        .HasColumnName("BGT_RELEASE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BgtSubHeadId")
                        .HasColumnName("BGT_SUB_HEAD_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BgtReleaseId");

                    b.ToTable("TBL_BGT_MGMT_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrc", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amt")
                        .HasColumnName("AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtExpId")
                        .HasColumnName("BGT_MGMT_EXP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentProcessId")
                        .HasColumnName("PAYMENT_PROCESS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentTypeId")
                        .HasColumnName("PAYMENT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SourceId")
                        .HasColumnName("SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtExpId");

                    b.ToTable("TBL_BGT_MGMT_SRC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrcOrg", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amt")
                        .HasColumnName("AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtExpOrgId")
                        .HasColumnName("BGT_MGMT_EXP_ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CcActive")
                        .HasColumnName("CC_ACTIVE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CcId")
                        .HasColumnName("CC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentProcessId")
                        .HasColumnName("PAYMENT_PROCESS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentTypeId")
                        .HasColumnName("PAYMENT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SourceId")
                        .HasColumnName("SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtExpOrgId");

                    b.HasIndex("CcId");

                    b.ToTable("TBL_BGT_MGMT_SRC_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrcRelease", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amt")
                        .HasColumnName("AMT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("BgtMgmtExpReleaseId")
                        .HasColumnName("BGT_MGMT_EXP_RELEASE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("CcActive")
                        .HasColumnName("CC_ACTIVE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("CcId")
                        .HasColumnName("CC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentProcessId")
                        .HasColumnName("PAYMENT_PROCESS_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentTypeId")
                        .HasColumnName("PAYMENT_TYPE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("SourceId")
                        .HasColumnName("SOURCE_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("BgtMgmtExpReleaseId");

                    b.HasIndex("CcId");

                    b.ToTable("TBL_BGT_MGMT_SRC_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtRelease", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ApprovedBgtYearly")
                        .HasColumnName("APPROVED_BGT_YEARLY")
                        .HasColumnType("double precision");

                    b.Property<string>("ChalaniNo")
                        .HasColumnName("CHALANI_NO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LetterSn")
                        .HasColumnName("LETTER_SN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("MinistryId")
                        .HasColumnName("MINISTRY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("OrgId")
                        .HasColumnName("ORG_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PreviousReleaseAmt")
                        .HasColumnName("PREVIOUS_RELEASE_AMT")
                        .HasColumnType("double precision");

                    b.Property<double?>("ReleaseAmount")
                        .HasColumnName("RELEASE_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("ReleaseDate")
                        .HasColumnName("RELEASE_DATE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("ReleaseType")
                        .HasColumnName("RELEASE_TYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("SpecialTippani")
                        .HasColumnName("SPECIAL_TIPPANI")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("TBL_BGT_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblConstructionOtherCharges", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PercentOfTax")
                        .HasColumnName("PERCENT_OF_TAX")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ServiceChargeCalculation")
                        .HasColumnName("SERVICE_CHARGE_CALCULATION")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("TBL_CONSTRUCTION_OTHER_CHARGES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblDataHistory", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<DateTime?>("AddDate")
                        .HasColumnName("ADD_DATE")
                        .HasColumnType("date");

                    b.Property<string>("ComputerName")
                        .HasColumnName("COMPUTER_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DataStatus")
                        .HasColumnName("DATA_STATUS")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("FieldName")
                        .HasColumnName("FIELD_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NewValue")
                        .HasColumnName("NEW_VALUE")
                        .HasColumnType("text");

                    b.Property<string>("OldValue")
                        .HasColumnName("OLD_VALUE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TableName")
                        .HasColumnName("TABLE_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TranTime")
                        .HasColumnName("TRAN_TIME")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<decimal?>("UserIdA")
                        .HasColumnName("USER_ID_A")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("WindowsUser")
                        .HasColumnName("WINDOWS_USER")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TBL_DATA_HISTORY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblDegister", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("IsFullDegister")
                        .HasColumnName("IS_FULL_DEGISTER")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TBL_DEGISTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblKharidaAadash", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TBL_KHARIDA_AADASH");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblLandOtherCharges", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PercentOfTax")
                        .HasColumnName("PERCENT_OF_TAX")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ServiceChargeCalculation")
                        .HasColumnName("SERVICE_CHARGE_CALCULATION")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("TBL_LAND_OTHER_CHARGES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblMalpotOtherCharges", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("PercentOfTax")
                        .HasColumnName("PERCENT_OF_TAX")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.HasIndex("Rateid");

                    b.ToTable("TBL_MALPOT_OTHER_CHARGES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblNaliType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TBL_NALI_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblOrganizationmaster", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Descriptiong")
                        .HasColumnName("DESCRIPTIONG")
                        .HasColumnType("text");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TBL_ORGANIZATIONMASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPaymentOrder", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("DateBs")
                        .HasColumnName("DATE_BS")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OrderCode")
                        .HasColumnName("ORDER_CODE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<string>("TokenNo")
                        .HasColumnName("TOKEN_NO")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TBL_PAYMENT_ORDER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPaymentOrderDetails", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("LinkVoucherId")
                        .HasColumnName("LINK_VOUCHER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PaymentOrderId")
                        .HasColumnName("PAYMENT_ORDER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PaymentPermissNo")
                        .HasColumnName("PAYMENT_PERMISS_NO")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("VoucherId")
                        .HasColumnName("VOUCHER_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentOrderId");

                    b.ToTable("TBL_PAYMENT_ORDER_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPaymentProcess", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PaymentProcess")
                        .HasColumnName("PAYMENT_PROCESS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PaymentProcessEng")
                        .HasColumnName("PAYMENT_PROCESS_ENG")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TBL_PAYMENT_PROCESS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPaymentType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("PaymentType")
                        .HasColumnName("PAYMENT_TYPE")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PaymentTypeEng")
                        .HasColumnName("PAYMENT_TYPE_ENG")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TBL_PAYMENT_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPropertyTax", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<double?>("HouseLandAmount")
                        .HasColumnName("HOUSE_LAND_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("MalpotAmount")
                        .HasColumnName("MALPOT_AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("NpEntryDate")
                        .HasColumnName("NP_ENTRY_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<double?>("TotalTax")
                        .HasColumnName("TOTAL_TAX")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TBL_PROPERTY_TAX");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblSanitaionTax", b =>
                {
                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Amount")
                        .HasColumnName("AMOUNT")
                        .HasColumnType("double precision");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(15)")
                        .HasMaxLength(15);

                    b.Property<double?>("FromArea")
                        .HasColumnName("FROM_AREA")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("IsApartment")
                        .HasColumnName("IS_APARTMENT")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.Property<double?>("ToArea")
                        .HasColumnName("TO_AREA")
                        .HasColumnType("double precision");

                    b.ToTable("TBL_SANITAION_TAX");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblStatusDetails", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("BrandId")
                        .HasColumnName("BRAND_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ItemId")
                        .HasColumnName("ITEM_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Masterid")
                        .HasColumnName("MASTERID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("NotRepairQty")
                        .HasColumnName("NOT_REPAIR_QTY")
                        .HasColumnType("double precision");

                    b.Property<double?>("NotUseInQty")
                        .HasColumnName("NOT_USE_IN_QTY")
                        .HasColumnType("double precision");

                    b.Property<double?>("Rate")
                        .HasColumnName("RATE")
                        .HasColumnType("double precision");

                    b.Property<double?>("RepairQty")
                        .HasColumnName("REPAIR_QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("SpecId")
                        .HasColumnName("SPEC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("StockQty")
                        .HasColumnName("STOCK_QTY")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("UnitId")
                        .HasColumnName("UNIT_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("UseInQty")
                        .HasColumnName("USE_IN_QTY")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("TBL_STATUS_DETAILS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblTaxType", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Descriptiong")
                        .HasColumnName("DESCRIPTIONG")
                        .HasColumnType("text");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TBL_TAX_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblTaxsourcerecordnew", b =>
                {
                    b.Property<decimal>("Taxsrcid")
                        .HasColumnName("TAXSRCID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Amountnotcollected")
                        .HasColumnName("AMOUNTNOTCOLLECTED")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("NetincomeCurfy")
                        .HasColumnName("NETINCOME_CURFY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("NetincomeLastfy")
                        .HasColumnName("NETINCOME_LASTFY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Recordtype")
                        .HasColumnName("RECORDTYPE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Taxnotpaidtaxpayercnt")
                        .HasColumnName("TAXNOTPAIDTAXPAYERCNT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TaxpaidtaxpayercntCurfy")
                        .HasColumnName("TAXPAIDTAXPAYERCNT_CURFY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("TaxpaidtaxpayercntLastfy")
                        .HasColumnName("TAXPAIDTAXPAYERCNT_LASTFY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Totaltaxpayercnt")
                        .HasColumnName("TOTALTAXPAYERCNT")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Taxsrcid")
                        .HasName("TBL_TAXSOURCERECORDNEW_pkey");

                    b.ToTable("TBL_TAXSOURCERECORDNEW");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblTolabikasaOrg", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Chairman")
                        .HasColumnName("CHAIRMAN")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Contactno")
                        .HasColumnName("CONTACTNO")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnName("EMAIL")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Sachiba")
                        .HasColumnName("SACHIBA")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Wardno")
                        .HasColumnName("WARDNO")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.ToTable("TBL_TOLABIKASA_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblVehicleParts", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NpName")
                        .HasColumnName("NP_NAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("text");

                    b.HasKey("Sn")
                        .HasName("TBL_VEHICLE_PARTS_pkey");

                    b.ToTable("TBL_VEHICLE_PARTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblbilltype", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Isincome")
                        .HasColumnName("ISINCOME")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TBLBILLTYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblbusinessServiceChMst", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("Flatchargerate")
                        .HasColumnName("FLATCHARGERATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("Servicechargepercent")
                        .HasColumnName("SERVICECHARGEPERCENT")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("TBLBUSINESS_SERVICE_CH_MST");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblexeversion", b =>
                {
                    b.Property<DateTime?>("Exedate")
                        .HasColumnName("EXEDATE")
                        .HasColumnType("date");

                    b.Property<decimal?>("Exeid")
                        .HasColumnName("EXEID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TBLEXEVERSION");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblfywisebtrates", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Snsubgroup")
                        .HasColumnName("SNSUBGROUP")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Subgroupid")
                        .HasColumnName("SUBGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TBLFYWISEBTRATES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblfywisempotassrate", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaUpto")
                        .HasColumnName("AREA_UPTO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("EachAreaRate")
                        .HasColumnName("EACH_AREA_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Fiscalyear")
                        .HasColumnName("FISCALYEAR")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<decimal?>("ForEachArea")
                        .HasColumnName("FOR_EACH_AREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Subgroupid")
                        .HasColumnName("SUBGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.HasIndex("Rateid");

                    b.HasIndex("Subgroupid");

                    b.ToTable("TBLFYWISEMPOTASSRATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblhlAddSubtract", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("AddFlag")
                        .HasColumnName("ADD_FLAG")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("AddSubTractType")
                        .HasColumnName("ADD_SUB_TRACT_TYPE")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FlatRate")
                        .HasColumnName("FLAT_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RatePercent")
                        .HasColumnName("RATE_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Sn")
                        .HasName("TBLHL_ADD_SUBTRACT_pkey");

                    b.ToTable("TBLHL_ADD_SUBTRACT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TbllandTypeArea", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TBLLAND_TYPE_AREA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblmalpotgroup", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TBLMALPOTGROUP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblmalpotrates", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AreaUpto")
                        .HasColumnName("AREA_UPTO")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("EachAreaRate")
                        .HasColumnName("EACH_AREA_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("ForEachArea")
                        .HasColumnName("FOR_EACH_AREA")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Rateperunit")
                        .HasColumnName("RATEPERUNIT")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Subgroupid")
                        .HasColumnName("SUBGROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.HasIndex("Subgroupid");

                    b.ToTable("TBLMALPOTRATES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblmalpotsubgroup", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<decimal?>("Groupid")
                        .HasColumnName("GROUPID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Worda")
                        .HasColumnName("WORDA")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.ToTable("TBLMALPOTSUBGROUP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TbltaxFineRebate", b =>
                {
                    b.Property<decimal>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("DurationInYears")
                        .HasColumnName("DURATION_IN_YEARS")
                        .HasColumnType("double precision");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("FlatRate")
                        .HasColumnName("FLAT_RATE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("RatePercent")
                        .HasColumnName("RATE_PERCENT")
                        .HasColumnType("double precision");

                    b.Property<string>("RebateFlag")
                        .HasColumnName("REBATE_FLAG")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("TaxType")
                        .HasColumnName("TAX_TYPE")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.HasKey("Sn")
                        .HasName("TBLTAX_FINE_REBATE_pkey");

                    b.ToTable("TBLTAX_FINE_REBATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tbltaxcalculationroka", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Iid")
                        .HasColumnName("IID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Reason")
                        .HasColumnName("REASON")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RokaDate")
                        .HasColumnName("ROKA_DATE")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.ToTable("TBLTAXCALCULATIONROKA");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblvehSerChMstr", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("AccId")
                        .HasColumnName("ACC_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Accode")
                        .HasColumnName("ACCODE")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<double?>("FlatChargeRate")
                        .HasColumnName("FLAT_CHARGE_RATE")
                        .HasColumnType("double precision");

                    b.Property<decimal?>("Rateid")
                        .HasColumnName("RATEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<double?>("ServiceChargePercent")
                        .HasColumnName("SERVICE_CHARGE_PERCENT")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("AccId");

                    b.ToTable("TBLVEH_SER_CH_MSTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tbusersecurityrights", b =>
                {
                    b.Property<decimal?>("Rightsid")
                        .HasColumnName("RIGHTSID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("TBUSERSECURITYRIGHTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Types", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.ToTable("TYPES");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Userassignments", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnName("ACTIVE")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("CREATEDAT")
                        .HasColumnType("TIMESTAMP");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CREATEDBY")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DisplayName")
                        .HasColumnName("DISPLAYNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasColumnName("ICON")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsLocked")
                        .HasColumnName("ISLOCKED")
                        .HasColumnType("boolean");

                    b.Property<string>("MenuName")
                        .HasColumnName("MENUNAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<short>("MenuOrder")
                        .HasColumnName("MENUORDER")
                        .HasColumnType("smallint");

                    b.Property<string>("MenuUrl")
                        .HasColumnName("MENUURL")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Module")
                        .HasColumnName("MODULE")
                        .HasColumnType("character varying(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(90)")
                        .HasMaxLength(90);

                    b.Property<decimal>("ParentMenuId")
                        .HasColumnName("PARENTMENUID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Rightsname")
                        .HasColumnName("RIGHTSNAME")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("numeric(22,0)");

                    b.Property<bool>("Visible")
                        .HasColumnName("VISIBLE")
                        .HasColumnType("boolean");

                    b.ToTable("USERASSIGNMENTS");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Usermaster", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("EmpId")
                        .HasColumnName("EMP_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(60)")
                        .HasMaxLength(60);

                    b.Property<string>("FiscalYear")
                        .HasColumnName("FISCAL_YEAR")
                        .HasColumnType("character varying(12)")
                        .HasMaxLength(12);

                    b.Property<string>("FromCentral")
                        .HasColumnName("FROM_CENTRAL")
                        .HasColumnType("character varying(1)")
                        .HasMaxLength(1);

                    b.Property<string>("Grants")
                        .HasColumnName("GRANTS")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Lastloggedon")
                        .HasColumnName("LASTLOGGEDON")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Lastloggedout")
                        .HasColumnName("LASTLOGGEDOUT")
                        .HasColumnType("date");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nepname")
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(70)")
                        .HasMaxLength(70);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OrgCode")
                        .HasColumnName("ORG_CODE")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PwdChangedDate")
                        .HasColumnName("PWD_CHANGED_DATE")
                        .HasColumnType("date");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Updatedby")
                        .HasColumnName("UPDATEDBY")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Userid")
                        .HasColumnName("USERID")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Userpassword")
                        .HasColumnName("USERPASSWORD")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<short?>("Userstatus")
                        .HasColumnName("USERSTATUS")
                        .HasColumnType("smallint");

                    b.Property<string>("WardNo")
                        .HasColumnName("WARD_NO")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Usermaster");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Vdc", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Districtid")
                        .HasColumnName("DISTRICTID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Typeid")
                        .HasColumnName("TYPEID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("Vdcid")
                        .HasColumnName("VDCID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("VDC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.WardMaster", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Address")
                        .HasColumnName("ADDRESS")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EngName")
                        .HasColumnName("ENG_NAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("MobileNo")
                        .HasColumnName("MOBILE_NO")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NepName")
                        .HasColumnName("NEP_NAME")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("NumberOfMembers")
                        .HasColumnName("NUMBER_OF_MEMBERS")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("PramukhId")
                        .HasColumnName("PRAMUKH_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("UppramukhId")
                        .HasColumnName("UPPRAMUKH_ID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<decimal?>("WardSecretaryId")
                        .HasColumnName("WARD_SECRETARY_ID")
                        .HasColumnType("numeric(22,0)");

                    b.HasKey("Id");

                    b.HasIndex("PramukhId");

                    b.HasIndex("UppramukhId");

                    b.HasIndex("WardSecretaryId");

                    b.ToTable("WARD_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Zone", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("CODE")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Engname")
                        .IsRequired()
                        .HasColumnName("ENGNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Nepname")
                        .IsRequired()
                        .HasColumnName("NEPNAME")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("Regionid")
                        .HasColumnName("REGIONID")
                        .HasColumnType("numeric(22,0)");

                    b.Property<string>("Remarks")
                        .HasColumnName("REMARKS")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Zoneid")
                        .HasColumnName("ZONEID")
                        .HasColumnType("numeric(22,0)");

                    b.ToTable("ZONE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccAccMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccTransType", "Type")
                        .WithMany("AccAccMaster")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_ACC_ACC_MASTER_TYPID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccAsuliBibaran", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PersonTypeMaster", "PersonType")
                        .WithMany("AccAsuliBibaran")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_ACC_PERSON_TYPE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBankGrnty", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccOrgMaster", "Person")
                        .WithMany("AccBankGrnty")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_GRNTY_PERSON_ORG_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccBankGrnty")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_GRNTY_WORK_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBankTrans", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Bankmaster", "Bank")
                        .WithMany("AccBankTrans")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_BANK_BANK_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.Incomebillmaster", "Bill")
                        .WithMany("AccBankTrans")
                        .HasForeignKey("BillId")
                        .HasConstraintName("FK_BANK_BILL_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccBankTrans")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK__BANK_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBgtRvsn", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccBgtAllocate", "BgtAlctn")
                        .WithMany("AccBgtRvsn")
                        .HasForeignKey("BgtAlctnId")
                        .HasConstraintName("FK_ACC_BGT_RVSN_BGT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBgtTransfer", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccBgtAllocate", "BgtAlctn")
                        .WithMany("AccBgtTransfer")
                        .HasForeignKey("BgtAlctnId")
                        .HasConstraintName("FK_TRNSFR_BGT_ALCTN_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "FromAcc")
                        .WithMany("AccBgtTransferFromAcc")
                        .HasForeignKey("FromAccId")
                        .HasConstraintName("FK_FROM_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "ToAcc")
                        .WithMany("AccBgtTransferToAcc")
                        .HasForeignKey("ToAccId")
                        .HasConstraintName("FK_TO_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccBudjetSource", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.MinistryAccHead", "MinAcc")
                        .WithMany("AccBudjetSource")
                        .HasForeignKey("MinAccId")
                        .HasConstraintName("FK_MIN_ACC")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IMIS_DataEntity.EntityClass.BudjetSource", "Source")
                        .WithMany("AccBudjetSource")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("FK_BUD_SOURCE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccCashTrans", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Incomebillmaster", "Bill")
                        .WithMany("AccCashTrans")
                        .HasForeignKey("BillId")
                        .HasConstraintName("FK_CASH_BILL_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccCashTrans")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_CASH_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccCurrenctyRate", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccCurrencty", "Currency")
                        .WithMany("AccCurrenctyRate")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ACC_CURRENCTY_RATE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccDhrtiBillDtl", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("AccDhrtiBillDtl")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_AC_DHRTI_DTL_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccDhrtiBillDtl")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_AC_DHRTI_DTL_VCHR_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccDhrtiBillDtl")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("SYS_C004345");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccDhrtiBillMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblbilltype", "Billtype")
                        .WithMany("AccDhrtiBillMaster")
                        .HasForeignKey("Billtypeid")
                        .HasConstraintName("SYS_C004389");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("AccDhrtiBillMaster")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("SYS_C004315");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccDhrtiBillMaster")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_AC_DHRTI_MST_VCHRID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccDhrtiBillMaster")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("SYS_C004344");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccExpensesDetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("AccExpensesDetails")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_DETAIL_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PaymentSlipMaster", "PaymentSlip")
                        .WithMany("AccExpensesDetails")
                        .HasForeignKey("PaymentSlipId")
                        .HasConstraintName("FK_DETAIL_PAMENT_SLIPID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PersonTypeMaster", "PersonType")
                        .WithMany("AccExpensesDetails")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_DETAIL_PERSON_TYPE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccTransType", "TransType")
                        .WithMany("AccExpensesDetails")
                        .HasForeignKey("TransTypeId")
                        .HasConstraintName("FK_ACC_TRANS_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccExpensesDetails")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_DETAIL_WWORK_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPadadhikariMstr", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccPadadhikariPost", "Post")
                        .WithMany("AccPadadhikariMstr")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentClearance", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("AccPaymentClearanceAcc")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_ACPAYCLEAR_ACCID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "BudgetAcc")
                        .WithMany("AccPaymentClearanceBudgetAcc")
                        .HasForeignKey("BudgetAccId")
                        .HasConstraintName("FK_ACPAYCLEAR_BUDGET");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentDeduction", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("AccPaymentDeductionAcc")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_ACID_PAY_DEDU");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "BudgetAcc")
                        .WithMany("AccPaymentDeductionBudgetAcc")
                        .HasForeignKey("BudgetAccId")
                        .HasConstraintName("FK_BUDGETID_PAY_DEDU");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccPaymentMaster", "Payment")
                        .WithMany("AccPaymentDeduction")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_PAYID_DEDUC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentDetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("AccPaymentDetailsAcc")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_DETAIL_ACC_ID1");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "BudgetAcc")
                        .WithMany("AccPaymentDetailsBudgetAcc")
                        .HasForeignKey("BudgetAccId")
                        .HasConstraintName("FK_DTL_BUDGET_ACC_ID1");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccPaymentMaster", "Payment")
                        .WithMany("AccPaymentDetails")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_PAM_DETAIL_PAYMENT_ID1");

                    b.HasOne("IMIS_DataEntity.EntityClass.PersonTypeMaster", "PersonType")
                        .WithMany("AccPaymentDetails")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_DETAIL_PERSON_TYPE_ID1");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccTransType", "TransType")
                        .WithMany("AccPaymentDetails")
                        .HasForeignKey("TransTypeId")
                        .HasConstraintName("FK_ACC_TRANS_TYPE1");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccPaymentDetails")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_PAYMNT_DETL_VCHR_ID1");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccPaymentDetails")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_DETAIL_WORK_ID1");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccPaymentMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PersonTypeMaster", "PersonType")
                        .WithMany("AccPaymentMaster")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_ACC_PAMT_PER_TYPE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("AccPaymentMaster")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("FK_ACC_PAMT_MST_SUB_MODL");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccTransType", "TransType")
                        .WithMany("AccPaymentMaster")
                        .HasForeignKey("TransTypeId")
                        .HasConstraintName("FK_ACC_PAMT_TRANS_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccPaymentMaster")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_ACC_PAMT_MST_VCHR_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccPaymentMaster")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_ACC_PAMT_WORK_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccVchrDetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("AccVchrDetails")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("FK_DTL_SUB_MODULEID")
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.AccTransType", "TransType")
                        .WithMany("AccVchrDetails")
                        .HasForeignKey("TransTypeId")
                        .HasConstraintName("FK_DETAIL_TRANS_TYPE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccVchrDetails")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_DETAIL_ACC_VCHR_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrTypeMaster", "VchrType")
                        .WithMany("AccVchrDetails")
                        .HasForeignKey("VchrTypeId")
                        .HasConstraintName("FK_DETAIL_VCHR_TYPE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccVchrDetails")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("SYS_C004349");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccVchrMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("AccVchrMaster")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("FK_ACC_SUB_MODULE_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrTypeMaster", "VchrType")
                        .WithMany("AccVchrMaster")
                        .HasForeignKey("VchrTypeId")
                        .HasConstraintName("FK_MAST_VCHR_TYPE_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccWorkFundsDetail", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccFundProvidrMstr", "Provider")
                        .WithMany("AccWorkFundsDetail")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_ACC_PROVIDER_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccWorkFundsDetail")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_WORK_MASTER_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.AccWorkPaymntTrans", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PersonTypeMaster", "PersonType")
                        .WithMany("AccWorkPaymntTrans")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_PAYMENT_PERSON_TYP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("AccWorkPaymntTrans")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_PAYMENT_VCHR_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccWorkMaster", "Work")
                        .WithMany("AccWorkPaymntTrans")
                        .HasForeignKey("WorkId")
                        .HasConstraintName("FK_PAYMENT_WORKID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.BankBranch", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Bankmaster", "Bank")
                        .WithMany("BankBranch")
                        .HasForeignKey("Bankid")
                        .HasConstraintName("FK_BANK_MSTR");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Banktransactions", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccDhrtiBillMaster", "DhrtiMaster")
                        .WithMany("Banktransactions")
                        .HasForeignKey("DhrtiMasterId")
                        .HasConstraintName("SYS_C004545");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubmoduleType")
                        .WithMany("Banktransactions")
                        .HasForeignKey("SubmoduleTypeId")
                        .HasConstraintName("SYS_C004319");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("Banktransactions")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_BANKTRAN_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Cashtransaction", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccDhrtiBillMaster", "DhrtiMaster")
                        .WithMany("Cashtransaction")
                        .HasForeignKey("DhrtiMasterId")
                        .HasConstraintName("SYS_C004544");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubmoduleType")
                        .WithMany("Cashtransaction")
                        .HasForeignKey("SubmoduleTypeId")
                        .HasConstraintName("SYS_C004318");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("Cashtransaction")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_CASHTRAN_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Firebrigadestate", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("Firebrigadestate")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_FIREBRIG_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Incomebilldetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("Incomebilldetails")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_INBILL_DETL_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("Incomebilldetails")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_INBILL_DET_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Incomebillmaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblbilltype", "Billtype")
                        .WithMany("Incomebillmaster")
                        .HasForeignKey("Billtypeid")
                        .HasConstraintName("SYS_C004390");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("Incomebillmaster")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("SYS_C004316");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccVchrMaster", "Vchr")
                        .WithMany("Incomebillmaster")
                        .HasForeignKey("VchrId")
                        .HasConstraintName("FK_INBILL_MAST_VCHR_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsAdjust", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptByNavigation")
                        .WithMany("InvGoodsAdjustAcceptByNavigation")
                        .HasForeignKey("AcceptBy")
                        .HasConstraintName("FK_ACCEPT_BY_GOOD_ADJ");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvGoodsAdjust")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_GOODS_ADJUST_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvGoodsAdjust")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_GOODS_ADJUST_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvGoodsAdjustPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_PREP_BY_GOOD_ADJ");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvGoodsAdjust")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_GOODS_ADJUST_SPEC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsRecDetl", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvGoodsRecDetl")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_GOODS_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvGoodsRecMast", "GoodsMaster")
                        .WithMany("InvGoodsRecDetl")
                        .HasForeignKey("GoodsMasterId")
                        .HasConstraintName("FK_GOODS_DTL_MASTERID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvGoodsRecDetl")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_GOODS_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvGoodsRecDetl")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_GOODS_SPEC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvUnit", "Unit")
                        .WithMany("InvGoodsRecDetl")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_GOODS_UNIT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvGoodsRecMast", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptByNavigation")
                        .WithMany("InvGoodsRecMastAcceptByNavigation")
                        .HasForeignKey("AcceptBy")
                        .HasConstraintName("FK_ACCEPT_BY_GOOD_EMP");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckByNavigation")
                        .WithMany("InvGoodsRecMastCheckByNavigation")
                        .HasForeignKey("CheckBy")
                        .HasConstraintName("FK_CHECK_BY_GOOD_EMP");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvGoodsRecMastPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_PREP_BY_GOOD_EMP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIssueDetail", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvIssueDetail")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_INV_ISS_DTL_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvIssueDetail")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_INV_ISS_DTL_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemCategory", "ItemTypeNavigation")
                        .WithMany("InvIssueDetail")
                        .HasForeignKey("ItemType")
                        .HasConstraintName("FK_INV_ISS_DTL_ITEM_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvIssueDetail")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_INV_ISS_DTL_SPEC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvIssueMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptByNavigation")
                        .WithMany("InvIssueMasterAcceptByNavigation")
                        .HasForeignKey("AcceptBy")
                        .HasConstraintName("FK_ISS_MAST_ACCEPT_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckByNavigation")
                        .WithMany("InvIssueMasterCheckByNavigation")
                        .HasForeignKey("CheckBy")
                        .HasConstraintName("FK_ISS_MAST_CHECK_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "IssueByNavigation")
                        .WithMany("InvIssueMasterIssueByNavigation")
                        .HasForeignKey("IssueBy")
                        .HasConstraintName("FK_ISS_MAST_ISSUE_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvIssueMasterPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_ISS_MAST_PREP_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvRequisitionMast", "Request")
                        .WithMany("InvIssueMaster")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK_ISS_MAST_REQUEST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemDetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptByNavigation")
                        .WithMany("InvItemDetailsAcceptByNavigation")
                        .HasForeignKey("AcceptBy")
                        .HasConstraintName("FK_ITEM_DETL_ACCEPT_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvItemDetails")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_ITEM_DETL_BRAND_ID")
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckByNavigation")
                        .WithMany("InvItemDetailsCheckByNavigation")
                        .HasForeignKey("CheckBy")
                        .HasConstraintName("FK_ITEM_DETL_CHECK_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvGoodsRecMast", "Dakhila")
                        .WithMany("InvItemDetails")
                        .HasForeignKey("DakhilaId")
                        .HasConstraintName("FK_ITEM_DETL_DAKHILA_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvGoodsAdjust", "GdAdj")
                        .WithMany("InvItemDetails")
                        .HasForeignKey("GdAdjId")
                        .HasConstraintName("FK_ITEM_DETL_GD_ADJ_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvItemDetails")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ITEM_DETL_ITEM_ID")
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvItemDetailsPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_ITEM_DETL_PREP_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvItemDetails")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_ITEM_DETL_SPEC_ID")
                        .IsRequired();
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemMst", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvUnit", "Unit")
                        .WithMany("InvItemMst")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_ITEM_UNIT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvItemStatuscheck", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptedByNavigation")
                        .WithMany("InvItemStatuscheckAcceptedByNavigation")
                        .HasForeignKey("AcceptedBy")
                        .HasConstraintName("FK_STATUSCHECK_ACCEPT_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvItemStatuscheck")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_STATUSCHECK_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvItemStatuscheck")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ITEM_STATUS_CHECK");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvItemStatuscheckPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_STATUSCHECK_PREP_BY");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvItemStatuscheck")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_STATUSCHECK_SPEC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "TallyByNavigation")
                        .WithMany("InvItemStatuscheckTallyByNavigation")
                        .HasForeignKey("TallyBy")
                        .HasConstraintName("FK_STATUSCHECK_CHECK_BY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvLilamappdetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvLilamAppmaster", "Lilamappli")
                        .WithMany("InvLilamappdetails")
                        .HasForeignKey("Lilamappliid")
                        .HasConstraintName("FK_INV_APPLIMASTID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurOrderDetl", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_PUR_ORDER_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_PUR_ORDER_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemCategory", "ItemTypeNavigation")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("ItemType")
                        .HasConstraintName("FK_PUR_ORDER_ITEM_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvPurOrderMast", "PurMst")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("PurMstId")
                        .HasConstraintName("FK_INV_PUR_MAST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_PUR_ORDER_SPEC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvUnit", "Unit")
                        .WithMany("InvPurOrderDetl")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_PUR_ORDER_UNIT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvPurOrderMast", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptedByNavigation")
                        .WithMany("InvPurOrderMastAcceptedByNavigation")
                        .HasForeignKey("AcceptedBy")
                        .HasConstraintName("FK_ACCEPTED_BY_USR");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckedByNavigation")
                        .WithMany("InvPurOrderMastCheckedByNavigation")
                        .HasForeignKey("CheckedBy")
                        .HasConstraintName("FK_CHECKED_BY_USR");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PreparedByNavigation")
                        .WithMany("InvPurOrderMastPreparedByNavigation")
                        .HasForeignKey("PreparedBy")
                        .HasConstraintName("FK_PREPARED_BY_USR");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvSupplier", "Supp")
                        .WithMany("InvPurOrderMast")
                        .HasForeignKey("SuppId")
                        .HasConstraintName("FK_SUPP_ID_SPPLIER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvReqDetail", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvBrand", "Brand")
                        .WithMany("InvReqDetail")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK_IN_REQ_DETL_BRAND_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvReqDetail")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_IN_REQ_DETL_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvRequisitionMast", "ReqMast")
                        .WithMany("InvReqDetail")
                        .HasForeignKey("ReqMastId")
                        .HasConstraintName("FK_IN_REQ_DETL_MASTER_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemSpec", "Spec")
                        .WithMany("InvReqDetail")
                        .HasForeignKey("SpecId")
                        .HasConstraintName("FK_IN_REQ_DETL_SPEC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvRequisitionMast", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptByNavigation")
                        .WithMany("InvRequisitionMastAcceptByNavigation")
                        .HasForeignKey("AcceptBy")
                        .HasConstraintName("FK_REQ_ACCEPT_BY_EMP");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckByNavigation")
                        .WithMany("InvRequisitionMastCheckByNavigation")
                        .HasForeignKey("CheckBy")
                        .HasConstraintName("FK_REQ_CHECK_BY_EMP");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvItemMst", "Item")
                        .WithMany("InvRequisitionMast")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_REQ_ITEM_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrepByNavigation")
                        .WithMany("InvRequisitionMastPrepByNavigation")
                        .HasForeignKey("PrepBy")
                        .HasConstraintName("FK_REQ_PREP_BY_EMP");

                    b.HasOne("IMIS_DataEntity.EntityClass.InvProject", "Proj")
                        .WithMany("InvRequisitionMast")
                        .HasForeignKey("ProjId")
                        .HasConstraintName("FK_REQ_PROJECT_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "ReqByNavigation")
                        .WithMany("InvRequisitionMastReqByNavigation")
                        .HasForeignKey("ReqBy")
                        .HasConstraintName("FK_REQ_REQ_BY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvRoomMst", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.InvDept", "Dept")
                        .WithMany("InvRoomMst")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("FK_ROOM_DEP_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.InvStatusDetail", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "AcceptbyNavigation")
                        .WithMany("InvStatusDetailAcceptbyNavigation")
                        .HasForeignKey("Acceptby")
                        .HasConstraintName("FK_INV_STADEL_ACCEPTBY");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "CheckedbyNavigation")
                        .WithMany("InvStatusDetailCheckedbyNavigation")
                        .HasForeignKey("Checkedby")
                        .HasConstraintName("FK_INV_STADEL_CHECKEDBY");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "PrebyNavigation")
                        .WithMany("InvStatusDetailPrebyNavigation")
                        .HasForeignKey("Preby")
                        .HasConstraintName("FK_INV_STADEL_PREBY");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapAreaGndCov", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.MapZone", "Region")
                        .WithMany("MapAreaGndCov")
                        .HasForeignKey("Regionid")
                        .HasConstraintName("FK_REGN_ID_AP_GND_COV");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapIncomeType", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("MapIncomeType")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_MINCOME_TYPE_ACCID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.MapRegionFar", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.MapZone", "Region")
                        .WithMany("MapRegionFar")
                        .HasForeignKey("Regionid")
                        .HasConstraintName("FK_REGIONID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.OrgBankAccount", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBankAccntType", "BankAccntType")
                        .WithMany("OrgBankAccount")
                        .HasForeignKey("BankAccntTypeId")
                        .HasConstraintName("FK_BANK_ACCNT_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.BankBranch", "Branch")
                        .WithMany("OrgBankAccount")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_BANK_BRANCH");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccOrgMaster", "Org")
                        .WithMany("OrgBankAccount")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_ORG_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.OrganizationTree", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisGeoRegion", "GeoRegionNavigation")
                        .WithMany("OrganizationTree")
                        .HasForeignKey("GeoRegion")
                        .HasConstraintName("FK_ORG_GEO_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ORG_PARENT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisAwards", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisAwards")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_AWARDS_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisBankPayroll", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Bankmaster", "Bank")
                        .WithMany("PisBankPayroll")
                        .HasForeignKey("BankId")
                        .HasConstraintName("FK_BNK_PYRL_BANK_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisBankPayroll")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_BNK_PYRL_EMP_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisDarbandi", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisDarbandi")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_DARBANDI_LOC_POST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "Office")
                        .WithMany("PisDarbandi")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_DARBANDI_OFFICE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisPostMaster", "Post")
                        .WithMany("PisDarbandi")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_DARBANDI_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisDeletdFrmFulfildDarb", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisDarbandi", "FrmDarbandi")
                        .WithMany("PisDeletdFrmFulfildDarb")
                        .HasForeignKey("FrmDarbandiId")
                        .HasConstraintName("FK_DEL_FD_DARBANDI_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "FrmOffice")
                        .WithMany("PisDeletdFrmFulfildDarb")
                        .HasForeignKey("FrmOfficeId")
                        .HasConstraintName("FK_DEL_FD_OFFICE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisFulfilledDarbandi", "FrmSnInFdNavigation")
                        .WithMany("PisDeletdFrmFulfildDarbFrmSnInFdNavigation")
                        .HasForeignKey("FrmSnInFd")
                        .HasConstraintName("FK_FROM_SN_IN_FD");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisFulfilledDarbandi", "ToSnInFdNavigation")
                        .WithMany("PisDeletdFrmFulfildDarbToSnInFdNavigation")
                        .HasForeignKey("ToSnInFd")
                        .HasConstraintName("FK_TO_SN_IN_FD");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEducation", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEduBoard", "Board")
                        .WithMany("PisEducation")
                        .HasForeignKey("BoardId")
                        .HasConstraintName("FK_EDU_BRD");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEduLevel", "EduLevel")
                        .WithMany("PisEducation")
                        .HasForeignKey("EduLevelId")
                        .HasConstraintName("FK_EDU_LVL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpAdvDedDtl", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpAdvDedDtl")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_ADV_DED_EMP_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpDepSource", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.BudjetSource", "BudjetSource")
                        .WithMany("PisEmpDepSource")
                        .HasForeignKey("BudjetSourceId")
                        .HasConstraintName("SYS_C004356")
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmpDep", "Dept")
                        .WithMany("PisEmpDepSource")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("SYS_C004447")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpLoans", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpLoans")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_EMP_LOANS_EMP_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpLongLeaves", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpLongLeaves")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_LEAVES_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpLongLeaves")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_LEAVES_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpMedExpense", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpMedExpense")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_MED_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpMedExpense")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_MED_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpPunishmnts", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpPunishmnts")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_PUNISH_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpPunishmnts")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_PUNISH_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpSrvcDtls", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpSrvcDtls")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_SRVC_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpSrvcDtls")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_SRVC_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpSuspends", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpSuspends")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_SUSPND_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpSuspends")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_SUSPND_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmpTrnsfrRec", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisEmpTrnsfrRec")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_TRNSFR_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmpTrnsfrRec")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_TRNSFR_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisEmployeeMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmpDep", "Dept")
                        .WithMany("PisEmployeeMaster")
                        .HasForeignKey("DeptId")
                        .HasConstraintName("SYS_C004448");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisPostMaster", "FirstAppointPost")
                        .WithMany("PisEmployeeMasterFirstAppointPost")
                        .HasForeignKey("FirstAppointPostId")
                        .HasConstraintName("FK_FIRST_APMT_POST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisEmployeeMaster")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_LOCAL_POST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.Bankmaster", "PayementBank")
                        .WithMany("PisEmployeeMaster")
                        .HasForeignKey("PayementBankId")
                        .HasConstraintName("FK_PAYBANK_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisPostMaster", "Post")
                        .WithMany("PisEmployeeMasterPost")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_POST_MST_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisForeignVisits", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisForeignVisits")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_FORGN_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisFulfilledDarbandi", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisDarbandi", "Darbandi")
                        .WithMany("PisFulfilledDarbandi")
                        .HasForeignKey("DarbandiId")
                        .HasConstraintName("FK_FULFIL_DARBANDI_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisFulfilledDarbandi")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_FULFIL_DARB_LOC_POST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "Office")
                        .WithMany("PisFulfilledDarbandi")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_FULFIL_DARB_OFFICE_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisInternalTransfer", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisAppointmentType", "AppointmntTypeNavigation")
                        .WithMany("PisInternalTransferAppointmntTypeNavigation")
                        .HasForeignKey("AppointmntType")
                        .HasConstraintName("FK_INT_APNTMT_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisDarbandi", "Darbandi")
                        .WithMany("PisInternalTransfer")
                        .HasForeignKey("DarbandiId")
                        .HasConstraintName("FK_INT_TRNSFR_DARBANDI_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisInternalTransfer")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_INT_TRNSFR_EMP_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "Office")
                        .WithMany("PisInternalTransferOffice")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_INT_TRNSFR_OFFICE_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisAppointmentType", "ToAppointmntTypeNavigation")
                        .WithMany("PisInternalTransferToAppointmntTypeNavigation")
                        .HasForeignKey("ToAppointmntType")
                        .HasConstraintName("FK_INT_TO_APNTMT_TYPE");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "ToLocalPost")
                        .WithMany("PisInternalTransfer")
                        .HasForeignKey("ToLocalPostId")
                        .HasConstraintName("FK_INT_LOC_POST_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "ToOffice")
                        .WithMany("PisInternalTransferToOffice")
                        .HasForeignKey("ToOfficeId")
                        .HasConstraintName("FK_INT_TRNSFR_TO_OFFICE_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisLocalPostMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisPostMaster", "Post")
                        .WithMany("PisLocalPostMaster")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_LO_PIS_POST_MASTER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisNijamatiSewaSamuha", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisNijamatiSewaSamuha", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_NIJAMATI_PARENT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisOtherAddSub", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisOtherAddSub")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_ADD_SUB_LOCAL_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPrizes", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisPrizes")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_PRIZE_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPublication", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisPublication")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_PBLCN_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPyrollLoanDtls", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("PisPyrollLoanDtls")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_PYROLL_LOAN_DTLS_ACCID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Emp")
                        .WithMany("PisPyrollLoanDtls")
                        .HasForeignKey("EmpId")
                        .HasConstraintName("FK_PYROLL_LOAN_DTLS_EMPID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmpLoans", "Loand")
                        .WithMany("PisPyrollLoanDtls")
                        .HasForeignKey("LoandId")
                        .HasConstraintName("FK_PYROLL_LOAN_DTLS_LID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisPayrolls", "Payroll")
                        .WithMany("PisPyrollLoanDtls")
                        .HasForeignKey("PayrollId")
                        .HasConstraintName("FK_PYROLL_LOAN_DTLS_PRID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisPyrollOthrDtls", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "Employee")
                        .WithMany("PisPyrollOthrDtls")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_PYROL_OTHR_DTLS_EMPID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisPayrolls", "Payroll")
                        .WithMany("PisPyrollOthrDtls")
                        .HasForeignKey("PayrollId")
                        .HasConstraintName("FK_PYROLL_OTHR_DTLS_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisReplacedInDarbandi", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisDarbandi", "Darbandi")
                        .WithMany("PisReplacedInDarbandi")
                        .HasForeignKey("DarbandiId")
                        .HasConstraintName("FK_REPL_FD_DARBANDI_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisFulfilledDarbandi", "EntrySnInFdNavigation")
                        .WithMany("PisReplacedInDarbandi")
                        .HasForeignKey("EntrySnInFd")
                        .HasConstraintName("FK_ENTRY_SN_IN_FD");

                    b.HasOne("IMIS_DataEntity.EntityClass.OrganizationTree", "Office")
                        .WithMany("PisReplacedInDarbandi")
                        .HasForeignKey("OfficeId")
                        .HasConstraintName("FK_REPL_FD_OFFICE_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisSgnfcntWork", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisSgnfcntWork")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_SGNWRK_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisTraining", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisTraining")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_TRNG_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisVisitedCountries", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisForeignVisits", "Visit")
                        .WithMany("PisVisitedCountries")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_VISIT_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.PisWorkshop", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.PisLocalPostMaster", "LocalPost")
                        .WithMany("PisWorkshop")
                        .HasForeignKey("LocalPostId")
                        .HasConstraintName("FK_WRKSHP_LOC_POST_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SanitationRate", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.SanitationGroup", "Group")
                        .WithMany("SanitationRate")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("SYS_C004386");

                    b.HasOne("IMIS_DataEntity.EntityClass.SanitationSubgroup", "Subgroup")
                        .WithMany("SanitationRate")
                        .HasForeignKey("Subgroupid")
                        .HasConstraintName("SYS_C004387");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SanitationSubgroup", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.SanitationGroup", "Group")
                        .WithMany("SanitationSubgroup")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("SYS_C004385");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.ServiceChargeMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("ServiceChargeMaster")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_SERVICE_CHR_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Storedbills", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblbilltype", "Billtype")
                        .WithMany("Storedbills")
                        .HasForeignKey("Billtypeid")
                        .HasConstraintName("SYS_C004391");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.SubModuleSource", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.BudjetSource", "BudjetSource")
                        .WithMany("SubModuleSource")
                        .HasForeignKey("BudjetSourceId")
                        .HasConstraintName("SYS_C004357")
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.AccSubModuleType", "SubModule")
                        .WithMany("SubModuleSource")
                        .HasForeignKey("SubModuleId")
                        .HasConstraintName("SYS_C004317")
                        .IsRequired();
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxAddtnlChrgDtls", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TaxAddtnlChrgDtls")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_TAX_ADD_DTL_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.Accode", "AccodeNavigation")
                        .WithMany("TaxAddtnlChrgDtls")
                        .HasForeignKey("Accode")
                        .HasConstraintName("FK_TAX_ADDTNL_CHRG_DTLS_ACCODE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TaxThliIssuedCntr", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Collectioncounters", "Cntr")
                        .WithMany("TaxThliIssuedCntr")
                        .HasForeignKey("CntrId")
                        .HasConstraintName("SYS_C004358");

                    b.HasOne("IMIS_DataEntity.EntityClass.Storedbills", "Theli")
                        .WithMany("TaxThliIssuedCntr")
                        .HasForeignKey("TheliId")
                        .HasConstraintName("SYS_C004388");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExp", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmt", "BgtMgmt")
                        .WithMany("TblBgtMgmtExp")
                        .HasForeignKey("BgtMgmtId")
                        .HasConstraintName("FK_BGT_MGMT");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExpOrg", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmtOrg", "BgtMgmtOrg")
                        .WithMany("TblBgtMgmtExpOrg")
                        .HasForeignKey("BgtMgmtOrgId")
                        .HasConstraintName("FK_BGT_MGMT_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtExpRelease", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmtRelease", "BgtMgmtRelease")
                        .WithMany("TblBgtMgmtExpRelease")
                        .HasForeignKey("BgtMgmtReleaseId")
                        .HasConstraintName("FK_BGT_MGMT_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtRelease", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtRelease", "BgtRelease")
                        .WithMany("TblBgtMgmtRelease")
                        .HasForeignKey("BgtReleaseId")
                        .HasConstraintName("FK_BGT_MGMT_REL");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrc", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmtExp", "BgtMgmtExp")
                        .WithMany("TblBgtMgmtSrc")
                        .HasForeignKey("BgtMgmtExpId")
                        .HasConstraintName("FK_BGT_MGMT_EXP");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrcOrg", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmtExpOrg", "BgtMgmtExpOrg")
                        .WithMany("TblBgtMgmtSrcOrg")
                        .HasForeignKey("BgtMgmtExpOrgId")
                        .HasConstraintName("FK_BGT_MGMT_ORG_EXP");

                    b.HasOne("IMIS_DataEntity.EntityClass.Contacts", "Cc")
                        .WithMany("TblBgtMgmtSrcOrg")
                        .HasForeignKey("CcId")
                        .HasConstraintName("FK_CC");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtMgmtSrcRelease", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblBgtMgmtExpRelease", "BgtMgmtExpRelease")
                        .WithMany("TblBgtMgmtSrcRelease")
                        .HasForeignKey("BgtMgmtExpReleaseId")
                        .HasConstraintName("FK_BGT_MGMT_REL_EXP");

                    b.HasOne("IMIS_DataEntity.EntityClass.Contacts", "Cc")
                        .WithMany("TblBgtMgmtSrcRelease")
                        .HasForeignKey("CcId")
                        .HasConstraintName("FK_CC_RELEASE");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblBgtRelease", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccOrgMaster", "Org")
                        .WithMany("TblBgtRelease")
                        .HasForeignKey("OrgId")
                        .HasConstraintName("FK_BGT_REL_ORG");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblConstructionOtherCharges", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TblConstructionOtherCharges")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_CONST_OTH_CH_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblLandOtherCharges", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TblLandOtherCharges")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_LAN_OTH_CHA_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblMalpotOtherCharges", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TblMalpotOtherCharges")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_MAL_OTH_CH_ACC_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotrates", "Rate")
                        .WithMany("TblMalpotOtherCharges")
                        .HasForeignKey("Rateid")
                        .HasConstraintName("SYS_C004396");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblPaymentOrderDetails", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.TblPaymentOrder", "PaymentOrder")
                        .WithMany("TblPaymentOrderDetails")
                        .HasForeignKey("PaymentOrderId")
                        .HasConstraintName("FK_DETAILS_TBL_PAYMENT_ORDER");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblbusinessServiceChMst", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TblbusinessServiceChMst")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_BUS_SERCH_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblfywisempotassrate", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotgroup", "Group")
                        .WithMany("Tblfywisempotassrate")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("SYS_C004394");

                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotrates", "Rate")
                        .WithMany("Tblfywisempotassrate")
                        .HasForeignKey("Rateid")
                        .HasConstraintName("SYS_C004395");

                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotsubgroup", "Subgroup")
                        .WithMany("Tblfywisempotassrate")
                        .HasForeignKey("Subgroupid")
                        .HasConstraintName("SYS_C004398");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblmalpotrates", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotgroup", "Group")
                        .WithMany("Tblmalpotrates")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("SYS_C004393");

                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotsubgroup", "Subgroup")
                        .WithMany("Tblmalpotrates")
                        .HasForeignKey("Subgroupid")
                        .HasConstraintName("SYS_C004397");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.Tblmalpotsubgroup", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Tblmalpotgroup", "Group")
                        .WithMany("Tblmalpotsubgroup")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("SYS_C004392");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.TblvehSerChMstr", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccAccMaster", "Acc")
                        .WithMany("TblvehSerChMstr")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_LAND_SERCH_ACC_ID");
                });

            modelBuilder.Entity("IMIS_DataEntity.EntityClass.WardMaster", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.AccPadadhikariMstr", "Pramukh")
                        .WithMany("WardMasterPramukh")
                        .HasForeignKey("PramukhId")
                        .HasConstraintName("FK_WARD_PRAMUKH_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.AccPadadhikariMstr", "Uppramukh")
                        .WithMany("WardMasterUppramukh")
                        .HasForeignKey("UppramukhId")
                        .HasConstraintName("FK_WARD_UPAPRAMUKH_ID");

                    b.HasOne("IMIS_DataEntity.EntityClass.PisEmployeeMaster", "WardSecretary")
                        .WithMany("WardMaster")
                        .HasForeignKey("WardSecretaryId")
                        .HasConstraintName("FK_WARD_SECRETARY_ID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Usermaster", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Usermaster", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS_DataEntity.EntityClass.Usermaster", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IMIS_DataEntity.EntityClass.Usermaster", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
